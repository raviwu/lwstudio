<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data structure on Ravi Wu</title>
    <link>https://raviwu.github.io/tags/data-structure/</link>
    <description>Recent content in data structure on Ravi Wu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 26 Oct 2020 14:42:56 +0800</lastBuildDate><atom:link href="https://raviwu.github.io/tags/data-structure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go | Map</title>
      <link>https://raviwu.github.io/go-map/</link>
      <pubDate>Mon, 26 Oct 2020 14:42:56 +0800</pubDate>
      
      <guid>https://raviwu.github.io/go-map/</guid>
      <description>Go 的 map 是鍵值對的資料結構。
// 宣告一個空白 map colors := map[string]string{} // 加入或修改鍵值對 colors[&amp;#34;Yello&amp;#34;] = &amp;#34;#cc8500&amp;#34; // 刪除鍵值（鍵不存在時並不會噴錯誤） delete(colors, &amp;#34;Red&amp;#34;) // 宣告一個空 map var numbers map[int]string numbers[1] = &amp;#34;One&amp;#34; // panic: runtime error: assignment ot entry in nil map 檢查鍵是否存在，如果指定的鍵不存在，會回傳零值給 value
value, exists := colors[&amp;#34;Blue&amp;#34;] if exists { fmt.Println(value) } else { fmt.Println(value) // &amp;#34;&amp;#34; } 迭代 map numbers := map[int]string{ 1: &amp;#34;one&amp;#34;, 2: &amp;#34;two&amp;#34;, 3: &amp;#34;three&amp;#34;, } for key, value := range numbers { fmt.</description>
    </item>
    
    <item>
      <title>Go | 切片（Slice）</title>
      <link>https://raviwu.github.io/go-slice/</link>
      <pubDate>Mon, 26 Oct 2020 13:14:21 +0800</pubDate>
      
      <guid>https://raviwu.github.io/go-slice/</guid>
      <description>切片（Slice）是操作其指向之 陣列（Array）的物件。
[指標|長度|最大長度] // 切片 | [1,2,3,4,5] // 陣列 切片的初始化 // 宣告一個長度與最大長度都是 5 的字串陣列 slice1 := make([]string, 5) // 宣告一個長度為 3 最大長度為 5 的整數陣列 slice2 := make([]int, 3, 5) 長度不能大於最大長度，不然編譯器會噴錯誤。一般來說，宣告切片的同時也會同時賦值：
// 宣告一個長度與最大長度為 3 的切片 slice1 := []string{&amp;#34;One&amp;#34;, &amp;#34;Two&amp;#34;, &amp;#34;Three&amp;#34;} // 宣告一個長度與最大長度為 100 的切片 slice2 := []string{99: &amp;#34;&amp;#34;} 空切片（nil slice）與空白切片（empty slice） 不管是空切片還是空白切片，標準函式庫裡的 append 、 len 跟 cap 的使用行為都一樣。
空切片（nil slice） 在 Go 程式中，空切片很常出現，通常被當成不存在資料時的回傳值，例如 return nilSlice, error。
空切片的宣吿方式：
var slice []int 空切片長成這樣：</description>
    </item>
    
    <item>
      <title>Go | 陣列（Array）</title>
      <link>https://raviwu.github.io/go-array/</link>
      <pubDate>Mon, 26 Oct 2020 11:36:46 +0800</pubDate>
      
      <guid>https://raviwu.github.io/go-array/</guid>
      <description>Go 的陣列是連續空間內儲存了固定數目之相同型別物件的容器。當使用 var array [5]int 宣告時，陣列內儲存的型別或者長度都不能再改變，如果需要更多的空間來儲存新的物件，需要宣告一個新的陣列後把原先的值搬過去新的陣列。
在 Go 語言中宣告新的變數且無賦值時，這些變數所指向的物件都會以其零值（Zero Value）初始化。有關於 Go 的零值，請參考 這邊。常用的零值：
   類型 零值     數值 0   布林值 false   字串 &amp;quot;&amp;quot;    初始化陣列的同時賦值 // 宣告一個 array1 變數的 int 陣列，長度為 5 且值依序分別為 1,2,3,4,5 array1 := [5]int{1,2,3,4,5} // 宣告一個 array2 變數的 int 陣列，長度為 5 且值依序分別為 0,1,2,0,0 array2 := [5]int{1: 1, 2: 2} // 宣告一個 array3 變數的 int 陣列，長度為取決於賦值內容 // 如以下 array3 的長度為 3 array3 := [.</description>
    </item>
    
  </channel>
</rss>
