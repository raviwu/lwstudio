<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>db on Ravi Wu</title><link>https://raviwu.github.io/tags/db/</link><description>Recent content in db on Ravi Wu</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Copyright © 2020, Ravi Wu.</copyright><lastBuildDate>Fri, 02 Sep 2016 05:05:44 +0800</lastBuildDate><atom:link href="https://raviwu.github.io/tags/db/index.xml" rel="self" type="application/rss+xml"/><item><title>利用 find_in_batches 在 Rails 做跨資料庫的資料移轉操作</title><link>https://raviwu.github.io/posts/use-find-in-batches-during-migration/</link><pubDate>Fri, 02 Sep 2016 05:05:44 +0800</pubDate><guid>https://raviwu.github.io/posts/use-find-in-batches-during-migration/</guid><description>在處理跨資料庫搬動並且需要一筆一筆資料去做各種運算處理時，最直覺的方式，是把表格裡的所有資料通通透過 ORM 撈到 ActiveRecord::Association 陣列裡，再用 each 去做操作：
User.all.each do |user| user.email = &amp;#34;assign@new.email&amp;#34; ... end 但由於 Rails 會需要先去建立這些 objects，如果資料筆數很多的話，一次通通撈出來會佔用過多不必要的記憶體，可以使用 find_in_batches 做批次處理，減少系統 RAM 的負擔。
User.find_in_batches do |group| group.each do |user| user.email = &amp;#34;assign@new.email&amp;#34; ... end end 但如果要做跨資料庫的處理時，需要特別安插 ActiveRecord::Base.establish_connection 讓 Rails 知道當前操作需要連到哪個資料庫，舉例而言，假如想把資料一批一批從 :origin 調出來，然後檢查、編輯以後塞到 :migrated 資料庫裡，那麼需要在 Query 前去告訴 Rails 目前要連到哪個資料去撈資料：
# Tell rails to get data from :origin ActiveRecord::Base.establish_connection :origin User.find_in_batches do |group| group.each do |user| # user variable here are the user object that Rails queried from :origin DB and initialed # Tell rails to switch connection to :migrated for data manipulation ActiveRecord::Base.</description></item></channel></rss>