<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>early break on Ravi Wu</title>
    <link>https://raviwu.github.io/tags/early-break/</link>
    <description>Recent content in early break on Ravi Wu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Sep 2020 13:41:31 +0800</lastBuildDate><atom:link href="https://raviwu.github.io/tags/early-break/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用複合條件來判斷是否進入下一輪 Java 迴圈</title>
      <link>https://raviwu.github.io/java-use-combo-condition-for-loop/</link>
      <pubDate>Thu, 10 Sep 2020 13:41:31 +0800</pubDate>
      
      <guid>https://raviwu.github.io/java-use-combo-condition-for-loop/</guid>
      <description>在 Java 迴圈寫法中，假如我想要透過一個外部判斷來提前中斷這個迴圈，之前我習慣寫：
public class Test { public static void main(String[] args) { int [] ints = {1,2,3,4,5}; boolean continueCond = true; for (int i=0; i&amp;lt;ints.length; i++) { continueCond = ints[i] &amp;lt; 4; if (!continueCond) break; System.out.println(ints[i]); } } } 但這樣寫其實有點冗，今天看到在 Functional Interfaces in Java 裡的一個範例寫法：
public class Test { public static void main(String[] args) { int [] ints = {1,2,3,4,5}; boolean continueCond = true; for (int i=0; i&amp;lt;ints.length &amp;amp;&amp;amp; continueCond; i++) { continueCond &amp;amp;= ints[i] &amp;lt; 4; System.</description>
    </item>
    
  </channel>
</rss>
