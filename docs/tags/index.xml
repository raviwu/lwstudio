
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Tags on Ravi Wu</title>
   <link>https://raviwu.github.io/tags/</link>
   <description>Recent content in Tags on Ravi Wu</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>zh-TW</language>
   <copyright>Copyright © 2020 | Ravi Wu</copyright>
   <lastBuildDate>Wed, 28 Oct 2020 12:05:03 +0800</lastBuildDate>
   
       <atom:link href="https://raviwu.github.io/tags/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Go | 型別（Type）</title>
       <link>https://raviwu.github.io/posts/go-type/</link>
       <pubDate>Wed, 28 Oct 2020 12:05:03 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/go-type/</guid>
       <description>&lt;p&gt;Go 的型別（Type）可以讓編譯器知道兩樣資訊：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要使用的記憶體大小&lt;/li&gt;
&lt;li&gt;這些記憶體所代表的內容&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以內建的型別為例：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;型別&lt;/th&gt;
&lt;th&gt;記憶體大小&lt;/th&gt;
&lt;th&gt;內容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;8 bytes&lt;/td&gt;
&lt;td&gt;整數&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float32&lt;/td&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/IEEE_754&#34;&gt;IEEE-754&lt;/a&gt; 浮點數&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;td&gt;true OR false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;有一些型別所代表的內容會跟著 build 機器的不同架構有所差異，例如同樣的 &lt;code&gt;int&lt;/code&gt; 在 64 位元電腦裡佔 8 bytes 但在 32 位元電腦裡只佔 4 bytes。&lt;/p&gt;
&lt;h2 id=&#34;自定義型別&#34;&gt;自定義型別&lt;/h2&gt;
&lt;p&gt;Go 容許自定義型別，最簡單的宣告方式為 struct&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;ext&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;isAdmin&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;var ravi user&lt;/code&gt; 可以宣告一個 &lt;code&gt;ravi&lt;/code&gt; 的變數，代表一個 &lt;code&gt;user&lt;/code&gt; 型別。宣告的當下，型別的欄位值會使用各欄位之型別的零值。&lt;/p&gt;
&lt;p&gt;當需要直接復值時也可以使用以下語法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tom&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tom@foo.bar&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;ext&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;321&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;isAdmin&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者也可以使用 &lt;code&gt;tom := user{&amp;quot;Tom&amp;quot;, &amp;quot;tom@foo.bar&amp;quot;, 321, true}&lt;/code&gt; 來宣告，通常都會把所有值放在同一行以縮減最後一個值的逗點。用單行宣告時，變數順序至關重要，需要依照自定義欄位的順序提供。&lt;/p&gt;
&lt;p&gt;已知自定義型別也能被當成欄位使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;admin&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;person&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;level&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;自定義型別的函數宣告&#34;&gt;自定義型別的函數宣告&lt;/h2&gt;
&lt;p&gt;型別函數宣告使用 &lt;code&gt;(u user)&lt;/code&gt; 或 &lt;code&gt;(u *user)&lt;/code&gt; 的時機：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Value Receiver
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;notify&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Pointer Receiver
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;changeEmail&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果函數取值做操作，不需要改變原物件欄位時，使用傳值的方式 &lt;code&gt;(u user)&lt;/code&gt; 宣告；如果函數需要針對物件作操作，更改欄位值的內容時，使用傳指標的方式 &lt;code&gt;(u *user)&lt;/code&gt; 去做宣告。&lt;/p&gt;
&lt;h3 id=&#34;go-的貼心動作&#34;&gt;Go 的貼心動作&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ravi&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ravi&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ravi@foo.bar&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;ravi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;notify&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即使上面的 &lt;code&gt;ravi&lt;/code&gt; 變數透過 &lt;code&gt;&amp;amp;user&lt;/code&gt; 被指定為指標，對指摽 &lt;code&gt;ravi&lt;/code&gt; 呼叫宣告傳值的 &lt;code&gt;notify()&lt;/code&gt; 仍可以編譯執行。原因在於 Go 編譯器在函數呼叫時另行處理為 &lt;code&gt;(*ravi).notify()&lt;/code&gt; 並且複製了一份 &lt;code&gt;*ravi&lt;/code&gt; 物件進函數處理。&lt;/p&gt;
&lt;p&gt;同樣地：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tomas&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tomas&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tomas&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tomas@foo.bar&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;tomas&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;changeEmail&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;newTomas@foo.bar&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以編譯成功，因為 Go 在做函數呼叫時實際上是長這樣： &lt;code&gt;(&amp;amp;tomas).changeEmail(&amp;quot;newTomas@foo.bar&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;go-的內建原始型別primative-types&#34;&gt;Go 的內建原始型別（Primative Types）&lt;/h2&gt;
&lt;p&gt;針對數字、字串和布林值等 Go 的內建型別，當對其值進行操作時，一律是對新的副本做操作。&lt;/p&gt;
&lt;h2 id=&#34;go-的參照型別reference-types&#34;&gt;Go 的參照型別（Reference Types）&lt;/h2&gt;
&lt;p&gt;像是&lt;a href=&#34;https://raviwu.github.io/posts/go-slice&#34;&gt;切片&lt;/a&gt;、&lt;a href=&#34;https://raviwu.github.io/posts/go-map&#34;&gt;map&lt;/a&gt;、channel、介面（interface）與函數（function）等參照型別，在宣告變數給這些型別的當下，只有被稱為 header 的值產生。嚴格來說，字串也是屬於參照型別。這些不同型別的 header 值，儲存了指向底層資料結構記憶體位址的指標（Pointer）。每個不同的參照型別除了這個指標之外還另外儲存了管理底層資料結構所需的訊息。（例如切片的 Length 與 Capacity）&lt;/p&gt;
&lt;p&gt;因為這個特性，在使用參照型別時，一律都是針對新的副本做操作。要注意的是，由於底層的資料結構可能與其他指標共用，針對資料變動需要特別小心。&lt;/p&gt;
&lt;h2 id=&#34;struct-型別&#34;&gt;Struct 型別&lt;/h2&gt;
&lt;p&gt;Struct 可以包含原始或非原始型別，在定義過程應該根據 Struct 欄位或者是其設計目的來決定這個 Struct 應該適用傳值或是傳指標式操作。&lt;/p&gt;
&lt;p&gt;以標準庫的範例來看：&lt;/p&gt;
&lt;h3 id=&#34;time&#34;&gt;Time&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sec&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;nsec&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;loc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Location&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sec&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nsec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;now&lt;/span&gt;()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;sed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unixToInternal&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;nsec&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Local&lt;/span&gt;}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Time 的屬性多是原始性質，所以大多數的內建函數是回傳一個新的 Time。&lt;/p&gt;
&lt;h3 id=&#34;file&#34;&gt;File&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;File&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;dirinfo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dirInfo&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;nepipe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;從定義看，File 型別根據定義，屬於參照型別。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Open&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;File&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OpenFile&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;O_RDONLY&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go 的標準庫實作回傳一個 File 的指標。&lt;/p&gt;
&lt;h2 id=&#34;介面interfaces&#34;&gt;介面（Interfaces）&lt;/h2&gt;
&lt;p&gt;多型（Polyporphism）是型別（Type）透過實作不同介面（Interface）來產生不同的行為。&lt;/p&gt;
&lt;p&gt;介面定義了行為，而實際上的實作內容要在自定義型別上界定。&lt;/p&gt;
&lt;p&gt;把值指定給 &lt;code&gt;notifer&lt;/code&gt; 介面的變數時：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;             var n notifier
  notifier   n = user{&amp;quot;Ravi&amp;quot;}
  介面的值                     iTable
 [位址]
 iTable  -------------------&amp;gt; [Type(user)]
 ------                       ------------
 [位址]       儲存值             Method set
  user   --&amp;gt; [User] 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把指標指定給 &lt;code&gt;notifer&lt;/code&gt; 介面的變數時：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;             var n notifier
  notifier   n = &amp;amp;user{&amp;quot;Ravi&amp;quot;}
  介面的值                     iTable
 [位址]
 iTable  -------------------&amp;gt; [Type(*user)]
 ------                       ------------
 [位址]       儲存值             Method set
  user   --&amp;gt; [User] 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;函數集method-sets&#34;&gt;函數集（Method sets）&lt;/h3&gt;
&lt;p&gt;函數集定義了介面實作是否合規。假如實作時只宣告指標作為 Method call 的 Receiver 時，那只有指標實作了介面，呼叫介面方法時需傳入指標。這個限制的理由是因為單就值本身並不能總是取得位址。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Values          Methods Receivers
---------------------------------
  T                (t T)
  *T               (t T) and (t *T)

Methods Receivers      Values
---------------------------------
 (t T)                  T and *T
 (t *T)                 *T
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;當我們傳值給函數時，Method Receiver 只有辦法拿到值本身，但如果是傳指標，Method Receiver 可以除了取得指標以外，還能透過指標拿到值。&lt;/p&gt;
&lt;p&gt;反過來看，當 Method Receiver 定義為值的時候，傳入的參數可以是指標或者是值；但如果 Method Receiver 定義為取得指標的話，傳入的參數只能是指標。&lt;/p&gt;
&lt;p&gt;再回顧一次，因為，值本身並不能總是解析出確切的位址。&lt;/p&gt;
&lt;h2 id=&#34;嵌入型別embedded-type&#34;&gt;嵌入型別（Embedded Type）&lt;/h2&gt;
&lt;p&gt;Go 允許使用者復用現有型別，而且使用者可以在復用時覆寫型別的行為。以下方程式碼為例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;notify&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sendEmail&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;admin&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 內嵌型別
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;level&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;user&lt;/code&gt; 是 &lt;code&gt;admin&lt;/code&gt; 的內嵌型別，所以如果初始化 &lt;code&gt;ad := admin { ... }&lt;/code&gt; 後，可以透過 &lt;code&gt;ad.user.notify()&lt;/code&gt; 來呼叫綁定給 &lt;code&gt;user&lt;/code&gt; 類別的 &lt;code&gt;notify()&lt;/code&gt; 函數。特別的是，也可以直接使用 &lt;code&gt;ad.notify()&lt;/code&gt; 的方式呼叫函數。&lt;/p&gt;
&lt;p&gt;來試試看用介面的方式來呼叫函數：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;notifier&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;notify&lt;/span&gt;()
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;notify&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sendEmail&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;admin&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 內嵌型別
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;level&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendNotification&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;notifer&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;notify&lt;/span&gt;()
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;ad&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;admin&lt;/span&gt;{
        &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;{
            &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ravi&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ravi@foo.bar&amp;#34;&lt;/span&gt;,
        },
        &lt;span style=&#34;color:#a6e22e&#34;&gt;level&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;super&amp;#34;&lt;/span&gt;,
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;sendNotification&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ad&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;從這個範例可以看出，嵌入型別的同時，外型別同時也具有內型別實作的介面。如果想要覆寫內型別的介面行為呢？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;admin&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;notify&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sending admin email: %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由於外型別自己也實作了 &lt;code&gt;notify()&lt;/code&gt;，此時 &lt;code&gt;ad.user.notify()&lt;/code&gt; 和 &lt;code&gt;ad.notify()&lt;/code&gt; 所引用的函數就會不同了：只有特地援用內型別的寫法才會引用到原先內型別的實作。&lt;/p&gt;
&lt;p&gt;如果是丟進介面函數，同樣的邏輯下，&lt;code&gt;sendNotification(&amp;amp;(ad.user))&lt;/code&gt; 和 &lt;code&gt;sendNotification(&amp;amp;ad)&lt;/code&gt; 也會呼叫到不同的實作。&lt;/p&gt;
&lt;h2 id=&#34;套件的匯出exporting與非匯出unexporting定義&#34;&gt;套件的匯出（Exporting）與非匯出（Unexporting）定義&lt;/h2&gt;
&lt;p&gt;套件內部元件的可見性用來控制函數或型別能否被外部引用。Go 使用命名規則來判定是否可被外部引用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用小寫開頭的定義為內部定義，無法被外部引用&lt;/li&gt;
&lt;li&gt;使用大寫開頭的定義為公開介面，可以被外部直接引用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此原則套用在：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Interface&lt;/li&gt;
&lt;li&gt;Type&lt;/li&gt;
&lt;li&gt;Field of Type&lt;/li&gt;
&lt;li&gt;Function&lt;/li&gt;
&lt;li&gt;Var / Const&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要注意的是，型別的欄位可以選擇性匯出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// package auth
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// package test
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;auth&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;auth&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;{
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ravi&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ravi@foo.bar&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#75715e&#34;&gt;// error comes here: unknown auth.User field &amp;#39;email&amp;#39;...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>Go | Map</title>
       <link>https://raviwu.github.io/posts/go-map/</link>
       <pubDate>Mon, 26 Oct 2020 14:42:56 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/go-map/</guid>
       <description>&lt;p&gt;Go 的 map 是鍵值對的資料結構。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 宣告一個空白 map
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;colors&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{}
&lt;span style=&#34;color:#75715e&#34;&gt;// 加入或修改鍵值對
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;colors&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yello&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#cc8500&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// 刪除鍵值（鍵不存在時並不會噴錯誤）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;delete(&lt;span style=&#34;color:#a6e22e&#34;&gt;colors&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;// 宣告一個空 map
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;One&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// panic: runtime error: assignment ot entry in nil map
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;檢查鍵是否存在，如果指定的鍵不存在，會回傳零值給 &lt;code&gt;value&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colors&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blue&amp;#34;&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;)
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;迭代-map&#34;&gt;迭代 map&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Key: %d Value: %s\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用-map-為函數之參數&#34;&gt;使用 map 為函數之參數&lt;/h2&gt;
&lt;p&gt;傳遞 map 到函數時，並不會另外複製新的 map 物件，函數對 map 參數的操作會反應到其他也指向該 map 的地方。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Go | 切片（Slice）</title>
       <link>https://raviwu.github.io/posts/go-slice/</link>
       <pubDate>Mon, 26 Oct 2020 13:14:21 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/go-slice/</guid>
       <description>&lt;p&gt;切片（Slice）是操作其指向之&lt;a href=&#34;https://raviwu.github.io/posts/go-array/&#34;&gt;陣列（Array）&lt;/a&gt;的物件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[指標|長度|最大長度] // 切片
  |
[1,2,3,4,5] // 陣列
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;切片的初始化&#34;&gt;切片的初始化&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 宣告一個長度與最大長度都是 5 的字串陣列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;// 宣告一個長度為 3 最大長度為 5 的整數陣列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;長度不能大於最大長度，不然編譯器會噴錯誤。一般來說，宣告切片的同時也會同時賦值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 宣告一個長度與最大長度為 3 的切片
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;One&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Two&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Three&amp;#34;&lt;/span&gt;}

&lt;span style=&#34;color:#75715e&#34;&gt;// 宣告一個長度與最大長度為 100 的切片
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;空切片nil-slice與空白切片empty-slice&#34;&gt;空切片（nil slice）與空白切片（empty slice）&lt;/h2&gt;
&lt;p&gt;不管是空切片還是空白切片，標準函式庫裡的 &lt;code&gt;append&lt;/code&gt; 、 &lt;code&gt;len&lt;/code&gt; 跟 &lt;code&gt;cap&lt;/code&gt; 的使用行為都一樣。&lt;/p&gt;
&lt;h3 id=&#34;空切片nil-slice&#34;&gt;空切片（nil slice）&lt;/h3&gt;
&lt;p&gt;在 Go 程式中，空切片很常出現，通常被當成不存在資料時的回傳值，例如 &lt;code&gt;return nilSlice, error&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;空切片的宣吿方式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;空切片長成這樣：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;位置&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;用途&lt;/td&gt;
&lt;td&gt;指標&lt;/td&gt;
&lt;td&gt;長度&lt;/td&gt;
&lt;td&gt;最大長度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;值&lt;/td&gt;
&lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;空白切片empty-slice&#34;&gt;空白切片（empty slice）&lt;/h3&gt;
&lt;p&gt;空白切片通常是用來表達零資料集合，例如查詢資料庫後回傳零筆資料。空白切片的指標指向空陣列，所以並不會另外佔用記憶體。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;操作切片&#34;&gt;操作切片&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;}
&lt;span style=&#34;color:#a6e22e&#34;&gt;newSlice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看一下記憶體內的樣子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   slice := []int{100,200,300,400,500}
 [ 指標 | 5 | 5 ]
    |
   [0]     [1]     [2]     [3]     [4]
[  100  |  200  |  300  |  400  |  500  ] // 底層陣列
            |
         [ 指標 | 2 | 4 ]
           newSlice := slice[1:3]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;雖然 &lt;code&gt;slice&lt;/code&gt; 跟 &lt;code&gt;newSlice&lt;/code&gt; 都指向同一個陣列，但這兩個切片的世界觀是不同的。對於一個最大長度為 &lt;code&gt;k&lt;/code&gt; 的切片 &lt;code&gt;slice[i:j]&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Length:   j - i
Capacity: k - i
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;對 &lt;code&gt;newSlice&lt;/code&gt; 而言，陣列裡的第一個元素甚至是不存在的。&lt;/p&gt;
&lt;p&gt;需要注意的是，由於切片是指向某個底層陣列，所以如果有其他的切片對於這個陣列有做任何操作，操作結果將會同時反映到其他也指向此陣列的切片。&lt;/p&gt;
&lt;h2 id=&#34;長度與最大長度&#34;&gt;長度與最大長度&lt;/h2&gt;
&lt;p&gt;即使最大長度允許，但切片不能存取大於長度的位址。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;// [ pointer | 5 | 5 ]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;newSlice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;// [ pointer | 2 | 4]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;newSlice&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// runtime error: index out of range [2] with length 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;append-切片後的長度在原陣列長度---新切片指向原陣列&#34;&gt;append 切片後的長度在原陣列長度 -&amp;gt; 新切片指向原陣列&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;}

&lt;span style=&#34;color:#a6e22e&#34;&gt;newSlice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]

&lt;span style=&#34;color:#a6e22e&#34;&gt;newSlice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; append(&lt;span style=&#34;color:#a6e22e&#34;&gt;newSlice&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;針對擴長後之新切片的操作會反映到原陣列&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   slice := []int{100,200,300,400,500}
 [ 指標 | 5 | 5 ]
    |
   [0]     [1]     [2]     [3]     [4]
[  100  |  200  |  300  |  600  |  500  ] // 底層陣列
           | |
           | |
        ---- ----------------------------
        |                               |
     [ 指標 | 2 | 4 ]                 [ 指標 | 3 | 4 ]
       newSlice := slice[1:3]          newSlice := append(newSlice, 600)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;append-切片後的長度超出原陣列長度---新切片會指向複製原陣列之值的新陣列&#34;&gt;append 切片後的長度超出原陣列長度 -&amp;gt; 新切片會指向複製原陣列之值的新陣列&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;append&lt;/code&gt; 函數會調節最大長度的擴長，針對長度 1000 以下的切片，會以兩倍增長，對於長度 1000 以上的切片則使用 1.25 的倍數做最大長度擴增。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;}

&lt;span style=&#34;color:#a6e22e&#34;&gt;newSlice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; append(&lt;span style=&#34;color:#a6e22e&#34;&gt;newSlice&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;來看看記憶體的狀態：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   slice := []int{100,200,300,400,500}
 [ 指標 | 5 | 5 ]
    |
   [0]     [1]     [2]     [3]     [4]
[  100  |  200  |  300  |  400  |  500  ] // 底層陣列
            |
         [ 指標 | 2 | 4 ]
           newSlice := slice[1:3]

   newSlice := append(newSlice, 600)
 [ 指標 | 6 | 6 ]
    |
   [0]     [1]     [2]     [3]     [4]     [5]
[  100  |  200  |  300  |  400  |  500  |  600  |  0  |  0  |  0  |  0  ]
// 新的底層陣列
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;三參數指定切片&#34;&gt;三參數指定切片&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;}
&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]

&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;// starting from source[2]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Legth:    3 - 2 = 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Capacity: 4 - 2 = 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;erroredSlice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]
&lt;span style=&#34;color:#75715e&#34;&gt;// Runtime Error: panic: runtime error: slice bounds out of range
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用同樣的長度與最大長度的好處在於，當進一步透過 append 去拓展切片時，由於原 slice 的最大長度已用盡， append 會在底層新增一個陣列並且把值複製過去新的陣列，後續新增的值只會加到這個新陣列，不會對原陣列有變動。&lt;/p&gt;
&lt;h2 id=&#34;range-迭代切片時區塊內的值為新值&#34;&gt;range 迭代切片時，區塊內的值為新值&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Value: %d Value-Addr: %X ElemAddr: %X\n&amp;#34;&lt;/span&gt;, 
        &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;])
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Output:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Value: 10 Value-Addr: 10500168 ElemAddr: 1052E100
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Value: 20 Value-Addr: 10500168 ElemAddr: 1052E104
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Value: 30 Value-Addr: 10500168 ElemAddr: 1052E108
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Value: 40 Value-Addr: 10500168 ElemAddr: 1052E10C
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;range&lt;/code&gt; 總是會從 0 開始迭代，如果有特殊的起始需求，可以使用一般的 &lt;code&gt;for&lt;/code&gt; 操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Index: %d Value: %d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;傳送切片為函數參數&#34;&gt;傳送切片為函數參數&lt;/h2&gt;
&lt;p&gt;由於切片所佔用的記憶體很少，和陣列不同，直接傳送一個大尺寸的切片進去函數裡並不會增加太多效能負擔。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Go | 陣列（Array）</title>
       <link>https://raviwu.github.io/posts/go-array/</link>
       <pubDate>Mon, 26 Oct 2020 11:36:46 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/go-array/</guid>
       <description>&lt;p&gt;Go 的陣列是連續空間內儲存了固定數目之相同型別物件的容器。當使用 &lt;code&gt;var array [5]int&lt;/code&gt; 宣告時，陣列內儲存的型別或者長度都不能再改變，如果需要更多的空間來儲存新的物件，需要宣告一個新的陣列後把原先的值搬過去新的陣列。&lt;/p&gt;
&lt;p&gt;在 Go 語言中宣告新的變數且無賦值時，這些變數所指向的物件都會以其零值（Zero Value）初始化。有關於 Go 的零值，請參考&lt;a href=&#34;https://dave.cheney.net/2013/01/19/what-is-the-zero-value-and-why-is-it-useful&#34;&gt;這邊&lt;/a&gt;。常用的零值：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;類型&lt;/th&gt;
&lt;th&gt;零值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;數值&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;布林值&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字串&lt;/td&gt;
&lt;td&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;初始化陣列的同時賦值&#34;&gt;初始化陣列的同時賦值&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 宣告一個 array1 變數的 int 陣列，長度為 5 且值依序分別為 1,2,3,4,5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;array1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;}

&lt;span style=&#34;color:#75715e&#34;&gt;// 宣告一個 array2 變數的 int 陣列，長度為 5 且值依序分別為 0,1,2,0,0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;array2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}

&lt;span style=&#34;color:#75715e&#34;&gt;// 宣告一個 array3 變數的 int 陣列，長度為取決於賦值內容
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 如以下 array3 的長度為 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;array3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;陣列的操作&#34;&gt;陣列的操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 宣告一個 array 變數的 int 陣列，長度為 3 且值依序分別為 1,2,3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}

&lt;span style=&#34;color:#75715e&#34;&gt;// 把 index 2 的值改為 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用指標為陣列的值&#34;&gt;使用指標為陣列的值&lt;/h2&gt;
&lt;p&gt;初始化 &lt;code&gt;array := [3]*int{0: new(int), 1: new(int)}&lt;/code&gt; 時：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;index&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;array[index]&lt;/td&gt;
&lt;td&gt;0xc0000b6020&lt;/td&gt;
&lt;td&gt;0xc0000b6028&lt;/td&gt;
&lt;td&gt;nil&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*array[index]&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;code&gt;error: cannot use assignment (array[i]) = (nil) as value&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;試試看改變陣列指標的值 &lt;code&gt;*array[0] = 100&lt;/code&gt; ：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;index&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;array[index]&lt;/td&gt;
&lt;td&gt;0xc0000b6020&lt;/td&gt;
&lt;td&gt;0xc0000b6028&lt;/td&gt;
&lt;td&gt;nil&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*array[index]&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;&lt;code&gt;error: cannot use assignment (array[i]) = (nil) as value&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;這邊可以注意到，指標的記憶體位址是一樣的，但值改變了。&lt;/p&gt;
&lt;p&gt;假如想要替現在為 &lt;code&gt;nil&lt;/code&gt; 的位置指定值，首先要在記憶體裡做出一個指標。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;透過 &lt;code&gt;i := 200&lt;/code&gt; 的方式宣告了 &lt;code&gt;i&lt;/code&gt; 以後，使用 &lt;code&gt;&amp;amp;i&lt;/code&gt; 取得 &lt;code&gt;i&lt;/code&gt; 的指標並賦值給 &lt;code&gt;array[2]&lt;/code&gt; 後，會變成：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;index&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;array[index]&lt;/td&gt;
&lt;td&gt;0xc0000b6020&lt;/td&gt;
&lt;td&gt;0xc0000b6028&lt;/td&gt;
&lt;td&gt;0xc0000b6038&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*array[index]&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;假如另外再賦值另一個變數 &lt;code&gt;j&lt;/code&gt; 時，指標位址會變：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這邊例外宣告了變數 &lt;code&gt;j&lt;/code&gt; 給整數 200，其實是另外在記憶體裡找了一塊地方塞值 200 給指標 &lt;code&gt;j&lt;/code&gt;，到此， &lt;code&gt;i&lt;/code&gt; 跟 &lt;code&gt;j&lt;/code&gt; 的位置不同，但值相同。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// false
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;突然跳來實驗一下 Go 的指標，可以發現每 &lt;code&gt;:=&lt;/code&gt; 了一個指標，都是在記憶體裡拿一塊新的區域來存值，這幾個指標都是不同位置，所以假若 &lt;code&gt;*k&lt;/code&gt; 被改值時不會影響到 &lt;code&gt;i&lt;/code&gt; 或 &lt;code&gt;j&lt;/code&gt; 這兩個指標所指向的值。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;index&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;array[index]&lt;/td&gt;
&lt;td&gt;0xc0000b6020&lt;/td&gt;
&lt;td&gt;0xc0000b6028&lt;/td&gt;
&lt;td&gt;0xc0000b6058&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*array[index]&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;重新指定一個指標給 &lt;code&gt;array[2] = new(int)&lt;/code&gt; 也是一樣的意思：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;index&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;array[index]&lt;/td&gt;
&lt;td&gt;0xc0000b6020&lt;/td&gt;
&lt;td&gt;0xc0000b6028&lt;/td&gt;
&lt;td&gt;0xc0000b6078&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*array[index]&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;要注意的是，如果複製以指標為值的陣列時，指標的位置會一樣：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;array1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: new(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: new(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)}
&lt;span style=&#34;color:#a6e22e&#34;&gt;array1&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;array1&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;array2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;array1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以發現 &lt;code&gt;array1&lt;/code&gt; 跟 &lt;code&gt;array2&lt;/code&gt; 裡頭放的指標，地址都是一樣的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;index&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;array1[index]&lt;/td&gt;
&lt;td&gt;0xc0000b6020&lt;/td&gt;
&lt;td&gt;0xc0000b6028&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array2[index]&lt;/td&gt;
&lt;td&gt;0xc0000b6020&lt;/td&gt;
&lt;td&gt;0xc0000b6028&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*array1[index]&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*array2[index]&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;當然，這就表示，如果改動指標指向的值，兩個陣列都會被影響，請注意！&lt;/p&gt;
&lt;h2 id=&#34;傳送陣列給函數&#34;&gt;傳送陣列給函數&lt;/h2&gt;
&lt;p&gt;由於 Golang 的函數是傳值（passed by value），所以把陣列直接傳進去函數裡面，對於程式效能會有負面影響。&lt;/p&gt;
&lt;p&gt;可以試試看下面的實驗：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 宣告一個 8MB 的陣列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1e6&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 把陣列直接傳到 foo 函數裡
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;// foo 直接接收陣列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1e6&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每一次 &lt;code&gt;foo&lt;/code&gt; 這個函數被呼叫，就會有 8MB 的空間在 stack 被取用。然後傳入的陣列會被複製到這個新取用的空間裡。即使你的機器可以處理這樣的負載，但其實有更好的方式。&lt;/p&gt;
&lt;h3 id=&#34;使用指標pointer作為參數&#34;&gt;使用指標（Pointer）作為參數&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1e6&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1e6&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這麼做，呼叫 &lt;code&gt;foo&lt;/code&gt; 的時候就不會浪費額外的記憶體空間去複製傳入的值，而是使用 &lt;code&gt;array&lt;/code&gt; 這個已經建立好的陣列。&lt;/p&gt;
&lt;p&gt;但這麼做要小心函數是否對於這個參數的值做改變，由於傳入的是指標，所以對於陣列的值做任何改變時，同一個記憶體中的數值會被更改。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>產品的七個面向（The 7 Product Dimensions）</title>
       <link>https://raviwu.github.io/posts/methodology-the-seven-product-dimensions/</link>
       <pubDate>Mon, 21 Sep 2020 13:48:42 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/methodology-the-seven-product-dimensions/</guid>
       <description>&lt;p&gt;從 &lt;a href=&#34;https://www.amazon.com/More-Agile-Testing-Addison-Wesley-Signature/dp/0321967054&#34;&gt;More Agile Testing&lt;/a&gt; 裡讀到各種方法論，在這邊隨機筆記一下。這次探討的是用 &lt;a href=&#34;https://www.ebgconsulting.com/blog/the-7-product-dimensions-a-guide-to-asking-the-right-questions/&#34;&gt;The seven product dimensions&lt;/a&gt; 來協助更全面性地探討規劃中的產品開發。&lt;/p&gt;
&lt;p&gt;七個可以在團隊中詢問的面向分別是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用者（User）：使用、評價或者是從此產品受益的對象。不限於自然人。如果是自然人的話，使用 Personas 來勾勒出使用者是不錯的方法。&lt;/li&gt;
&lt;li&gt;介面（Interface）：使用何種介面來連結產品以及使用者？產品送出何種訊息？關係圖、脈絡圖或者是原型都是不錯的視覺化工具。&lt;/li&gt;
&lt;li&gt;動作（Action）：產品能做什麼事？這些動作是怎麼驅動的？有沒有順序之分？產品如何回應不同的動作？這些動作如何影響資料？&lt;/li&gt;
&lt;li&gt;資料（Data）：產品接受什麼類型的資料？資料來源為何？上下文脈絡？資料的有效期間多長？&lt;/li&gt;
&lt;li&gt;控制（Control）：產品本身受到什麼政策、法規、商業邏輯等限制？違反這些限制的風險如何？&lt;/li&gt;
&lt;li&gt;環境（Environment）：斟酌一下產品的物理特徵，會在何種情境使用？如何安裝、設定、授權、營運？開發環境中所需的環境條件又是如何？&lt;/li&gt;
&lt;li&gt;品質特徵（Quality Attribute）：產品需要達到何種程度的服務品質？可靠度？停機率？安全性？可使用性？想想可測試性、可延展性，思考一下該如何評價這些品質特徵。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在產品規劃、衝刺週期計畫會議或是規格討論會議中，提醒自己用這七個面向的問題來增加思慮與討論過程的考量涵蓋度。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>InputStream 、 DataInputStream 與 BufferedInputStream</title>
       <link>https://raviwu.github.io/posts/java-inputstream-datainputstream-and-bufferedinputstream/</link>
       <pubDate>Fri, 11 Sep 2020 13:46:57 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/java-inputstream-datainputstream-and-bufferedinputstream/</guid>
       <description>&lt;p&gt;Java 有很多不同的 InputStream 類別，老是搞不清楚，&lt;code&gt;InputStream&lt;/code&gt;、&lt;code&gt;DataInputStream&lt;/code&gt;跟&lt;code&gt;BufferedInputStream&lt;/code&gt;最近出現在我看的書的練習題裡，一些從 Java Doc (1.8) 文件中拉出來的相關連結：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/io/Closeable.html&#34;&gt;Closeable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/io/FilterInputStream.html&#34;&gt;FilterInputStream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html&#34;&gt;InputStream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/io/DataInputStream.html&#34;&gt;DataInputStream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/io/BufferedInputStream.html&#34;&gt;BufferedInputStream&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;InputStream&lt;/code&gt;是抽象類別，實踐了&lt;code&gt;Closeable&lt;/code&gt;，所以可以當成&lt;code&gt;try with resource&lt;/code&gt;裡的資源。類別方法裡定義了&lt;code&gt;InputStream.nullInputStream()&lt;/code&gt;可以產生空的&lt;code&gt;InputStream&lt;/code&gt;。另外也規範所有實作子類別必須提供&lt;code&gt;public int read() throws IOException&lt;/code&gt;方法來回傳下一個 byte 的內容。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FilterInputStream&lt;/code&gt;在生成時吃進&lt;code&gt;InputStream&lt;/code&gt;後把&lt;code&gt;InputStream&lt;/code&gt;存起來，並且覆寫了所有&lt;code&gt;InputStream&lt;/code&gt;裡的方法，大部分覆寫的方法都是把原來的操作轉到物件生成時丟進去的&lt;code&gt;InputStream&lt;/code&gt;上，以供更細分的子類別使用，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;[],&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; off&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; in&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; off&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; len&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;DataInputStream&lt;/code&gt;跟&lt;code&gt;BufferedInputStream&lt;/code&gt;都進一步繼承&lt;code&gt;FilterInputStream&lt;/code&gt;。&lt;code&gt;DataInputStream&lt;/code&gt;主要是從&lt;code&gt;InputStream&lt;/code&gt;直接讀入 Java 的 primitive data type。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BufferedInputStream&lt;/code&gt;在內部會產生一個緩衝陣列（buffer array）來支援&lt;code&gt;mark&lt;/code&gt;跟&lt;code&gt;reset&lt;/code&gt;方法，透過額外使用的緩衝空間來先讀入資料，以優化資料讀入的效能。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>泛型 Java Functional Interface 的特規化</title>
       <link>https://raviwu.github.io/posts/java-generic-functional-interface-specilization/</link>
       <pubDate>Fri, 11 Sep 2020 13:44:04 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/java-generic-functional-interface-specilization/</guid>
       <description>&lt;p&gt;如果某個特殊型別的 Functional Interface 常常被使用時，有時候直接宣告型別會比較方便引用。可以透過兩種方式來做特規，介面與抽象類別：&lt;/p&gt;
&lt;p&gt;Generic Functional Interface&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TwoArgsProcessor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;X&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    X &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;X arg1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; X arg2&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;介面（Interface）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TwoIntsProcessor&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; TwoArgsProcessor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;抽象類別（Abstract Class）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TwoIntsProcessorAbstract&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; TwoArgsProcessor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>使用複合條件來判斷是否進入下一輪 Java 迴圈</title>
       <link>https://raviwu.github.io/posts/java-use-combo-condition-for-loop/</link>
       <pubDate>Thu, 10 Sep 2020 13:41:31 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/java-use-combo-condition-for-loop/</guid>
       <description>&lt;p&gt;在 Java 迴圈寫法中，假如我想要透過一個外部判斷來提前中斷這個迴圈，之前我習慣寫：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; ints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; continueCond &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ints&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            continueCond &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ints&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; 4&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;continueCond&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ints&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但這樣寫其實有點冗，今天看到在 &lt;a href=&#34;https://www.apress.com/gp/book/9781484242773&#34;&gt;Functional Interfaces in Java&lt;/a&gt; 裡的一個範例寫法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; ints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; continueCond &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ints&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; continueCond&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            continueCond &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; ints&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; 4&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ints&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但這樣寫的行為跟使用 &lt;code&gt;if (!continueCond) break;&lt;/code&gt; 強制跳出迴圈有些差異，由於 &lt;code&gt;for&lt;/code&gt; 裡面是要走完全部才會跳出，所以第二種寫法依然會把 4 給印出來。以這個範例來說，變成要把需要跳開的動作包在一個條件裡：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; ints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; continueCond &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ints&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; continueCond&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            continueCond &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; ints&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; 4&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;continueCond&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ints&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;本來想說好像是會比較簡潔一點，但發現改成後面這種寫法以這個範例來說並沒有特別的好處，以書上的情境可能會更適用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isLowerCase&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        result &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; Character&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isUpperCase&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果迴圈本身只需要找到第一個符合某個條件的情況就可提前中斷後續的判讀，並且迴圈本身沒有 side effect 的話，這樣做可以免除寫那一行 &lt;code&gt;break;&lt;/code&gt; 的篇幅。參考參考。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Windows 裡的類 homebrew 工具： scoop.sh</title>
       <link>https://raviwu.github.io/posts/tools-scoop-sh/</link>
       <pubDate>Fri, 10 Aug 2018 13:39:10 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/tools-scoop-sh/</guid>
       <description>&lt;p&gt;新工作的環境是 Windows 系統，所有的開發工具生態系都要重新摸索。剛開始發現可以用 &lt;a href=&#34;https://gitforwindows.org/&#34;&gt;Git for Windows&lt;/a&gt; 裝好後的 console 下平常習慣的 bash 指令後，努力想要自己寫一些 shell script 去自動化開發工具跟環境變數的初始化，簡單的情境下好似都還堪用。&lt;/p&gt;
&lt;p&gt;可是如果要安裝的套件都要一個一個手刻 script 好像又有些白癡。&lt;/p&gt;
&lt;p&gt;因緣際會下被提點去找其他平台上的類 Homebrew 方案，權衡系統權限低落等實際情況下，好像也只剩 &lt;a href=&#34;https://scoop.sh/&#34;&gt;scoop.sh&lt;/a&gt; 可以用了。&lt;/p&gt;
&lt;p&gt;搞了一整天反覆試驗了一陣子，總算是把裝機清單給列了出來，放在&lt;a href=&#34;https://github.com/raviwu/environmentSetups/blob/master/scoop.ps1&#34;&gt;這裡&lt;/a&gt;。雖然還是要手動輸入指令，但是可以統一管理這些套件，用指令反安裝等已經比之前的原始人狀態進步多了。&lt;/p&gt;
&lt;p&gt;被 &lt;a href=&#34;https://ohmyz.sh/&#34;&gt;oh my zsh&lt;/a&gt; 慣壞眼睛的我，有幸發現可以用 &lt;a href=&#34;https://github.com/lukesampson/scoop/wiki/Theming-Powershell&#34;&gt;concfg&lt;/a&gt; 稍微把 PowerShell 的顏色弄得順眼一點。所謂山不轉路轉，路不轉人轉，接下來還需要努力爬行。（握拳）&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>在 RSpec 裡測試 Rake Task</title>
       <link>https://raviwu.github.io/posts/testing-rake-task-in-rspec/</link>
       <pubDate>Sun, 07 May 2017 13:36:08 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/testing-rake-task-in-rspec/</guid>
       <description>&lt;p&gt;最近被 Rake Task 的測試設定搞得一頭霧水，簡單記錄一下測試 Rake Task 的測試設定，以及各種鬼打牆的血淚史：&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;為了避免各種 task 載入、執行狀態等相互干擾導致 test case 會偶發性失敗，每一次執行 test case 時就去做「載入」、「卸載」會比較沒有鬼打牆狀況出現。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# spec_helper.rb&lt;/span&gt;

config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;before(&lt;span style=&#34;color:#e6db74&#34;&gt;:each&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;rake&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_tasks
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;after(&lt;span style=&#34;color:#e6db74&#34;&gt;:each&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;rake&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;Rake&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Task&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clear
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把 &lt;code&gt;Rails.application.load_tasks&lt;/code&gt; 放在 &lt;code&gt;before(:each)&lt;/code&gt; 確保每次載入 test case 前都有正確 load 到要測試的那隻 task ，並在 &lt;code&gt;after(:each)&lt;/code&gt; 時用 &lt;code&gt;Rake::Task.clear&lt;/code&gt; 去清空剛剛載入的 Rake Task。&lt;/p&gt;
&lt;p&gt;透過 &lt;code&gt;rake: true&lt;/code&gt; 這個 &lt;code&gt;flag&lt;/code&gt; 可以避免其他不相關的單元測試也去載入 Rake Task。&lt;/p&gt;
&lt;p&gt;透過每個 each 都做載入跟卸載 Rake Task 後，就可以在 test case 單純使用 &lt;code&gt;Rake::Task[&#39;task_name&#39;].invoke&lt;/code&gt; 來手動執行 Task 而不用另外去作載入或卸載。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# spec/lib/tasks/example_task_spec.rb&lt;/span&gt;
require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rake&amp;#39;&lt;/span&gt;

describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example_task test&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;rake&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
    it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;does something&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Rake&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Task&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;example_task&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;invoke
    expect(result)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to eq(something)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;血淚史&#34;&gt;血淚史&lt;/h2&gt;
&lt;p&gt;之所以最後還是決定要每次 test case 就去載入，實在是因為太常出現鬼打牆的狀況了：&lt;/p&gt;
&lt;h3 id=&#34;單一檔案裡-raketask-只能被-invoke-一次&#34;&gt;單一檔案裡 Rake::Task 只能被 invoke 一次&lt;/h3&gt;
&lt;p&gt;有多個需要 invoke 的 task 時就會有些 example 沒能成功執行 task&lt;/p&gt;
&lt;p&gt;之前寫 Rake Task 測試時，都單獨在 &lt;code&gt;*_spec.rb&lt;/code&gt; 裡面直接載：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rake&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
describe &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;some rake test&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_tasks

    it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;does something&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Rake&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Task&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;task_name&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;invoke
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這個寫法每個測試檔案單獨跑的時候都沒有太大問題，因為每次載入檔案時就會透過 &lt;code&gt;Rails.application.load_tasks&lt;/code&gt; 去載入所有定義在 &lt;code&gt;lib/tasks/*.rb&lt;/code&gt; 裡面的 Rake Task，並且透過 &lt;code&gt;Rake::Task[&#39;task_name&#39;].invoke&lt;/code&gt; 來手動 invoke 測試目標。&lt;/p&gt;
&lt;p&gt;但是！如果要在單一的測試裡面有多個 example 需要 invoke Rake Task 的話，單獨用 &lt;code&gt;invoke&lt;/code&gt; 就會時不時出現某些 example 沒有正確執行 Rake Task 的狀況。&lt;/p&gt;
&lt;p&gt;之前蠢蠢地只用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Rake&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Task&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;task_name&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;reenable
&lt;span style=&#34;color:#66d9ef&#34;&gt;Rake&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Task&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;task_name&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;invoke
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Rake&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Task&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;task_name&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;execute
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;去強制執行那隻 Rake Task 來通過測試。然後就繼續過著美好的日子直到⋯⋯&lt;/p&gt;
&lt;h3 id=&#34;rake-task-被-invoke-了超出預期的次數&#34;&gt;Rake Task 被 invoke 了超出預期的次數&lt;/h3&gt;
&lt;p&gt;強制 invoke task 的話，在單一檔案跑測試都沒問題，但如果是多個 rake task spec 一起跑的時候，就會一直出現鬼打牆的狀態，明明只呼叫 &lt;code&gt;Rake::Task[&#39;task_name&#39;].execute&lt;/code&gt; 一次卻會被 invoke 多一次。（眼神死&lt;/p&gt;
&lt;p&gt;在推測多個 test file 相互干擾為主因的情況下，翻找老半天，後來才找到是因為每一隻 &lt;code&gt;*_spec.rb&lt;/code&gt; 都豪氣地 &lt;code&gt;Rails.application.load_tasks&lt;/code&gt; 後就載後不理，導致某些 task 被 define 了多次，所以跑 &lt;code&gt;Rake::Task[&#39;task_name&#39;].execute&lt;/code&gt; 的時候就會多跑那些被重複定義的 task 。&lt;/p&gt;
&lt;p&gt;在「每個 test 檔案去載入與卸載」和「把載入卸載寫在 &lt;code&gt;spec_helper.rb&lt;/code&gt; 」這兩個方案之間，我後來是選擇了後者，看起來乾淨一滴滴。（汗&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>書摘 | Soft Skills: The software developer&#39;s life manual</title>
       <link>https://raviwu.github.io/posts/notes-soft-skills/</link>
       <pubDate>Wed, 22 Feb 2017 13:28:15 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/notes-soft-skills/</guid>
       <description>&lt;p&gt;公司前輩分享了 &lt;a href=&#34;https://www.manning.com/books/soft-skills&#34;&gt;Soft Skills: The software developer&amp;rsquo;s life manual&lt;/a&gt; 這本書，後來又在 &lt;a href=&#34;https://softnshare.wordpress.com/2016/02/24/10classprogrammerbooks/&#34;&gt;Soft &amp;amp; Share&lt;/a&gt; 看到推廣介紹，抱著當休閒讀物的心情來閱讀是很不錯的。&lt;/p&gt;
&lt;p&gt;作者 John Z. Sonmez 在這本書中想要涵括的內容實在包山包海，如果對於人生迷惘的捧油，的確只要看了這本書所簡單介紹的內容就大概可以對人生重拾一些希望，也能循著這些主題繼續往深探索。比較特別的是，每個章節的篇幅被設計成大概一篇 Blog 文長度，所以閱讀起來的節奏感很是不錯，即使有些主題令人打哈欠，有些主題不斷地出現各種課程推銷，但都還能在睡著與失去耐心之前看完一個段落，這點是很值得效尤的閱讀設計技巧。&lt;/p&gt;
&lt;p&gt;討論的主題分成七大部分：&lt;/p&gt;
&lt;h3 id=&#34;section-1---career--section-2---marketing-yourself&#34;&gt;Section 1 - Career / Section 2 - Marketing Yourself&lt;/h3&gt;
&lt;p&gt;這兩部份討論的事情差不多，主要觀點是：把自己當成事業經營。&lt;/p&gt;
&lt;p&gt;每個人的人生想成就的事物不盡相同，但大致上不出「創業」、「職員」、「自由工作者」這三種工作型態，每種工作型態都有其優缺點，沒有最好的選擇，只有最適合、最自在的選擇。制定目標的技巧：由大至小，先抓大方向，然後再去規劃要怎樣分階段性地往大方向前進，在執行計畫目標的過程當中，也不斷地去重新思考「目前的走向」是不是在往「想要的目標」前進，不斷地修正、不斷地思考，減少瞎忙的狀態。&lt;/p&gt;
&lt;p&gt;每個人的人生想成就的事物不盡相同，但大致上不出「創業」、「職員」、「自由工作者」這三種工作型態，每種工作型態都有其優缺點，沒有最好的選擇，只有最適合、最自在的選擇。制定目標的技巧：由大至小，先抓大方向，然後再去規劃要怎樣分階段性地往大方向前進，在執行計畫目標的過程當中，也不斷地去重新思考「目前的走向」是不是在往「想要的目標」前進，不斷地修正、不斷地思考，減少瞎忙的狀態。&lt;/p&gt;
&lt;p&gt;把自己當成事業經營，適當時候要勇於承擔風險，即使是受僱，心態上也應該將工作表現視為擦亮自己「工程師專業」這塊招牌的方法之一。心境不同，面對困難的態度也會有所不同。&lt;/p&gt;
&lt;p&gt;除了砥礪自己的正直人格之外，也要適當地行銷自己的工作能力，名聲資產的累積管道除了被動地讓共事的同事發掘之外，可以積極地利用自媒體增加自身技術能力的曝光度，對公司內部分享技術心得、寫 blog 文章、參與 open source 專案、錄製 youtube 教學影片、參加 conference 或 meetup 活動，用開放地態度分享自己的心得，和業界的其他工程師教學相長營造正循環，累積一些口碑的被動收入（？&lt;/p&gt;
&lt;h3 id=&#34;section-3---learning&#34;&gt;Section 3 - Learning&lt;/h3&gt;
&lt;p&gt;作者提出了一套學習的方法論，大致上是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;了解領域範疇的大輪廓&lt;/li&gt;
&lt;li&gt;制定學習目標&lt;/li&gt;
&lt;li&gt;定義目標達成標準&lt;/li&gt;
&lt;li&gt;搜集學習的資源（書、演講、課程）&lt;/li&gt;
&lt;li&gt;制定學習計畫&lt;/li&gt;
&lt;li&gt;過濾資源&lt;/li&gt;
&lt;li&gt;學習可以開始動手的最小幅度知識&lt;/li&gt;
&lt;li&gt;透過實際使用學習到的知識做一些有用的事情&lt;/li&gt;
&lt;li&gt;第 8 步驟撞牆的時候回過頭去繼續補充所需要的進階知識&lt;/li&gt;
&lt;li&gt;透過教學他人來融會貫通學習到的知識內容&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;個人覺得學習陌生領域最困難的入門點在於「不知道自己目前不知道什麼」、「不知道自己應該要先知道什麼」，所以步驟 1~6 其實已經有點「雞生蛋、蛋生雞」，有時候會遇到選一本很多人推薦的書開始讀了以後，陷入書裡面額外提到的各種細節而無法前進（其實大多時候是那種書都很厚重本身就有一種難以征服的心理壓力），又或者是努力地做了一堆「入門」練習然後就卡住無法自己融會貫通地應用在想做的專案上。&lt;/p&gt;
&lt;p&gt;我後來發現一個簡單的方法，可以不用在學習之前就花時間搜集資料跟理解當下看再多也看不懂的材料，那就是 &lt;a href=&#34;https://www.udemy.com/&#34;&gt;Udemy&lt;/a&gt; 的課程（或是其他已經整理好的學習計畫），特別是一些透過實作來做教學的程式課，選一些「看來像自己專案需要之技術」、「對於某特定技術的簡介與案例操演」類課程，跟著課程的模組實際動手做，不錯的課程設計已經把步驟 1~6 給完成，直接進入 7~8 階段。最後透過在自己的自媒體上分享所學到的知識內容，重新在腦中組織一次剛塞進去不久的知識，順便累積曝光資產，有時候遇到新的問題要回去查找資料時，自己寫的 blog 文章也會意外成為不錯的參考資料。&lt;/p&gt;
&lt;h3 id=&#34;section-4---productivity&#34;&gt;Section 4 - Productivity&lt;/h3&gt;
&lt;p&gt;介紹了工作規劃的技巧，延續第一部分 Career 規劃的內容，從年目標往下細分成：季計劃、月計劃、週計劃、每日工作計畫。&lt;/p&gt;
&lt;p&gt;把任務切成 25 分鐘的蕃茄鐘單位，基本的時間安排優先順序是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先排入必須要完成的例行性任務&lt;/li&gt;
&lt;li&gt;空下必須出席的會議時間或者是其他的約會時間&lt;/li&gt;
&lt;li&gt;剩下來的空檔就可以插入預計要完成的各種任務&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每天的合理預估工作強度大概是 10 個蕃茄鐘，透過排定計劃，可以幫助減少「我還可以做更多」、「都好忙可是不知在忙什麼」等困擾。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;盡量讓自己的作息常規化，避免熬夜或是生理時鐘混亂造成每天的工作效率不一難以掌握計劃進度等問題。&lt;/li&gt;
&lt;li&gt;在每個月的第一天、每個禮拜一以及每天工作之前，需要適當地重新檢視目前狀態並調整工作規劃。&lt;/li&gt;
&lt;li&gt;把比較繁雜、容易分心的工作任務安排在一起批次處理，例如回覆 email 或是查看社群軟體私訊等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;section-5---financial--section-6---fitness--section-7---spirit&#34;&gt;Section 5 - Financial / Section 6 - Fitness / Section 7 - Spirit&lt;/h3&gt;
&lt;p&gt;後面的章節對於全然不認為這些主題對人生很重要的捧油可以加減看一下。第七部分提供了一些理財跟規劃退休生活的基本概念與計算邏輯。第八部分介紹了運動、食物與健康的基本知識，第九部分強調身心靈平衡還有正能量的好處。到後來有種隱隱約約的安麗感就是了。（茶）&lt;/p&gt;
&lt;h2 id=&#34;書摘&#34;&gt;書摘&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 47&lt;/p&gt;
&lt;p&gt;This kind of mindset is crucial to managing your career, because when you start to think of yourself as a business, you start to make good business decisions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 52&lt;/p&gt;
&lt;p&gt;Every step you take without a clear direction is a wasted step. Don’t randomly walk through life without a purpose for your career.&lt;/p&gt;
&lt;p&gt;Your big goal should be something not too specific, but clear enough that you can know if you’re steering toward it or not. Think about what you want to ultimately do with your career.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 53&lt;/p&gt;
&lt;p&gt;The smaller goals keep you on track and motivated so that you keep heading in the direction of your bigger goals. If you set out to accomplish a big goal and don’t have smaller goals along the way, you don’t end up having time to course-correct when you’re off track.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 55&lt;/p&gt;
&lt;p&gt;If you want to be a good software developer, you have to learn to deal effectively with people (even if writing code is the part of your job you enjoy the most).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 56&lt;/p&gt;
&lt;p&gt;Perhaps one of the most important concepts you should know when dealing with people is that, at their core, every single person wants to feel important.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 57&lt;/p&gt;
&lt;p&gt;You have to learn to bite your tongue and only speak words of encouragement if you want to inspire people to perform their best or you want to effect change.&lt;/p&gt;
&lt;p&gt;The key to successfully dealing with people is to stop thinking in terms of you and what you want and start thinking in terms of what is important to the other person and what she wants.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 58&lt;/p&gt;
&lt;p&gt;It does no good telling your boss why you would like to implement a feature a certain way. It’s much better to phrase the suggestion from the frame of mind of why implementing a feature the way you suggest will be useful to your boss.&lt;/p&gt;
&lt;p&gt;I have come to the conclusion that there is only one way under high heaven to get the best of an argument—and that is to avoid it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 59&lt;/p&gt;
&lt;p&gt;If you recognize someone as being caustic, don’t try to change them, and don’t try to deal with them; just stay out of their way and limit your interactions as much as possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 60&lt;/p&gt;
&lt;p&gt;Whatever you do, don’t get sucked into their trap. If you have to interact with them, do it in a minimal, nonemotionally invested way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 86&lt;/p&gt;
&lt;p&gt;The most important thing you can do to go up in the ranks at any company is to take on more responsibility.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 87&lt;/p&gt;
&lt;p&gt;One of the best places to search is in areas that no one else wants to get involved in. Perhaps there’s a legacy application that no one wants to touch or a certain module in your codebase that is particularly nasty. These are landmasses to add to your growing empire, because no one will want them, so you won’t be up for much of a fight. But if you can turn those swamplands into fertile ground, you can really show your value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 90&lt;/p&gt;
&lt;p&gt;In any organization there are always plenty of people who will tell you why some idea won’t work or some problem is too hard. People like that are a dime a dozen. Don’t be one of them. Instead, be the person who always has a solution to a problem and is able to execute that solution to get results.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 92&lt;/p&gt;
&lt;p&gt;Being a professional is all about showing up, doing your work, and not letting adversity defeat you. Being a professional requires you to overcome your vices so that you can sit down and produce the best work possible.&lt;/p&gt;
&lt;p&gt;Simply put, a professional is someone who takes their responsibilities and career seriously and is willing to make the tough choices that have to be made—often at their own expense—for the purpose of doing what they know is right.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 97&lt;/p&gt;
&lt;p&gt;Make sure that you have an education plan that you can follow to expand your skills and learn new things that will help you do a better job. Don’t ever be happy with good enough—always strive to become a better version of yourself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 99&lt;/p&gt;
&lt;p&gt;Before you think about quitting your job you need have a solid plan in place. I’d highly recommend starting whatever business you want to create on the side first and only transitioning to doing it fulltime when you’re generating enough income from it to support yourself. I know this is the slow and painful way to quit your day job, but it’s important to do things this way for more than just financial reasons.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 114&lt;/p&gt;
&lt;p&gt;Many software developers first venturing into the realm of entrepreneurship make the common mistake of building a product before they’ve found an audience for that product. Although it might seem sensible to start by building a product, you want to avoid falling into this trap; otherwise, you risk creating a solution to a problem that doesn’t exist.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 116&lt;/p&gt;
&lt;p&gt;You should verify the product by testing the market and seeing if your potential customers are actually willing to pay for it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 118&lt;/p&gt;
&lt;p&gt;Start small instead and work on your first product on the side. You want to make the learning curve as short as possible, so you need to reduce the cycle time between when you take actions and see the results. The problem with a large product is that you may not see the actual results until you’re very far along and have spent considerable effort building that product.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 126&lt;/p&gt;
&lt;p&gt;The real solution to this problem is careful time management. You can work whatever hours you’d like to work, but set a schedule for each week and stick to it. The more regular and routine the schedule, the better.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 132&lt;/p&gt;
&lt;p&gt;Faking it till you make it is all about putting on such a great act that you convince your own mind and body to make that act a reality. Faking it till you make it is the opposite of being unconfident. It’s acting with confidence in all that you undertake, even when you’re in way over your head, because you have a supreme belief in yourself to overcome all obstacles.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 134&lt;/p&gt;
&lt;p&gt;Your confidence—careful here, not arrogance—will be contagious. When you carry around this “can-do” attitude, when you have a true belief in yourself that isn’t inflated or exaggerated, but based on knowing that you eventually will succeed at anything you set your mind to, you’ll find that others will believe this too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 145&lt;/p&gt;
&lt;p&gt;The right way to market yourself is to provide value to others. We’ll talk more about this in chapter 21, but the key to successfully marketing yourself in a way that makes others like you and want to work with you is to do it in a way that provides them value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 146&lt;/p&gt;
&lt;p&gt;Marketing yourself is all about learning how to control the message you’re sending out and the image you’re portraying and amplifying the reach of that message.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 151&lt;/p&gt;
&lt;p&gt;You need four things to have a brand: a message, visuals, consistency, and repeated exposure. All of these four components are required to create a successful brand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 158&lt;/p&gt;
&lt;p&gt;As a software developer, learning how to write might actually help you to write better code, because you’ll have an easier time communicating your intent. It will also help you to communicate your ideas and make them seem more compelling.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 160&lt;/p&gt;
&lt;p&gt;The largest portion of your success as a blogger will depend on one thing and one thing only: consistency.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 165&lt;/p&gt;
&lt;p&gt;Try not to become a man of success, but rather try to become a man of value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 166&lt;/p&gt;
&lt;p&gt;The content you produce should be squarely aimed at providing value in the areas you identify from your research. You might be particularly interested in a certain aspect of a framework or technology, but if your target audience isn’t, it won’t do you much good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 167&lt;/p&gt;
&lt;p&gt;Every time you set out to do something, whether it be creating a blog post, recording a screencast, or another activity, you should look at it from the perspective of how it’s creating value for someone else.&lt;/p&gt;
&lt;p&gt;It’s easy to fall into the trap of talking about yourself and trying to demonstrate why you’re worthy, but you’ll find much more success in solving other people’s problems and genuinely being helpful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 170&lt;/p&gt;
&lt;p&gt;So, what do you post on social networks so that you can add value to others? The simple answer is anything that you’d find useful or interesting.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 182&lt;/p&gt;
&lt;p&gt;The simple truth, though, is that you don’t write a book to make money. You write a book to increase your reputation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 185&lt;/p&gt;
&lt;p&gt;But if you want to be successful at your efforts, you have to learn to stop caring about what people think. You have to learn how to not be afraid to look like an idiot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 189&lt;/p&gt;
&lt;p&gt;The point is to always be moving forward. It doesn’t matter if you’re taking little steps and slowly getting accustomed to the temperature of the water or if you jump right in and make a big splash in the deep-end.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 191&lt;/p&gt;
&lt;p&gt;We all tend to learn best by doing and teaching. Active learning is a much more effective way to learn than any other way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 192&lt;/p&gt;
&lt;p&gt;Before you read a book on a subject, skim the book and dive right in and start playing around. Don’t worry if you don’t know what you’re doing. Just have fun and see what kind of questions your mind develops as you experiment and explore.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 193&lt;/p&gt;
&lt;p&gt;Then you can take what you’ve learned and reapply it to your play. See how the new tools you’ve learned about fit into your play and solve the problems you had. Explore new areas and unlock new questions that need solutions. Repeat this cycle over and over again as you inch forward in knowledge for the purpose of solving the problems you discover as you play. This way the information you acquire is meaningful to you, not just words on a page.&lt;/p&gt;
&lt;p&gt;Finally, seal it all in cement by teaching what you’ve learned to someone else.&lt;/p&gt;
&lt;p&gt;Once you’ve played around and you have all kinds of questions, only then go back and read the text. Now when you go back to your reference material, you’ll approach it with a greater desire to devour and absorb its contents. You’ll have questions that you’ll want answers to; you’ll have an idea of what’s important.&lt;/p&gt;
&lt;p&gt;the key guiding principle is this idea of learning through play, experimentation, and teaching what you learned to someone else.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 195&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to get started—What were the basic things I needed to know to get started using whatever I was learning? 2.  The breadth of the subject—How big was the thing I was learning and what could I do with it? I didn’t need to know every detail to start, but if I had a decent overview of what I could do and what was possible, I could always find more details later. 3.  The basics—Beyond just getting started, what were the basic use cases and the most common things I’d need to know to use a particular technology? What was the 20% I could learn that would cover 80% of my daily usage?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When I tried to learn everything upfront, I was just wasting my time, because what was actually important got mixed in with all the other little details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 201&lt;/p&gt;
&lt;p&gt;You might be tempted to make your scope bigger and less focused, because you want to learn about different subtopics in your topic area, but resist the temptation and try to be as focused as possible. You can only learn one thing at a time. You can always come back later and learn about other subtopics that branch off of your original topic, but for now, pick one narrowly focused thing and go with it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 203&lt;/p&gt;
&lt;p&gt;Instead of reading a single book on a subject, try to gather many different resources to help you learn.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 218&lt;/p&gt;
&lt;p&gt;Being a mentor is about looking objectively at another person’s problems and offering solutions they might not be able to see because they are too close to the problem.&lt;/p&gt;
&lt;p&gt;We all need help seeing the things that we can’t see in our own lives, because we’re a bit myopic when it comes to our own problems and situations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 222&lt;/p&gt;
&lt;p&gt;We tend to overestimate how much we know about a subject when we first learn about it. It’s very easy to fool yourself into thinking you really understand something—that is, until you try to teach it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 223&lt;/p&gt;
&lt;p&gt;When you try to teach someone, you’re forced to reorganize the data in your own head. The act of thinking about the best way to explain something and put it on paper, or into words or slides, causes you to put together the disconnected bits of information in your brain and reorganize them in a way that makes sense.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 224&lt;/p&gt;
&lt;p&gt;No one wants to learn from someone who is unsure of what they’re saying, and they also don’t want to be made to feel stupid when they are being taught.&lt;/p&gt;
&lt;p&gt;Just try to realize that your job in teaching is to help someone else, not to prove your superiority or to seek approval.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 227&lt;/p&gt;
&lt;p&gt;Many computer science degrees include courses on algorithms, operating systems, relational database theory, and other topics that are timeless, but the simple truth is that when you sit down at your desk to write some code, you rarely fall back on the skills you were taught in school. Most of the work we do as developers involves using new technologies and learning how to work with them. We rarely need to go back to our computer science roots.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 232&lt;/p&gt;
&lt;p&gt;That’s the problem with gaps in our knowledge. We tend to gloss over them and we tend to be too busy to stop and take the time to fill them in. We end up not really understanding what we’re doing or do things in an inefficient way to avoid areas where we’re weak or feel uncomfortable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 233&lt;/p&gt;
&lt;p&gt;Just be honest with yourself: if you encounter something you don’t understand, you don’t have to learn it right away, but add it to your list so you can at least identify gaps in your knowledge.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 239&lt;/p&gt;
&lt;p&gt;Before you begin a task, make sure you have done everything you can to protect yourself from interruptions—both internal and external.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 241&lt;/p&gt;
&lt;p&gt;The basic idea of my productivity plan is to plan out my entire week in small tasks that take no more than two hours.&lt;/p&gt;
&lt;p&gt;My planning starts at the quarter level. I divide my year up into four quarters of three months each. When I plan out my quarter, I’ll try to come up with one big project that I want to get done during that quarter and I’ll also plan out some smaller goals. I’ll also think about what things I’ll do on a weekly or daily basis. This planning is usually done in a list in an application like Evernote. I’ll create a high-level outline of what I want to accomplish during the quarter. This gives me a good idea of what my one major goal is and how I’ll achieve it. It also keeps me focused.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 242&lt;/p&gt;
&lt;p&gt;Weekly planning&lt;/p&gt;
&lt;p&gt;Every month, on the first day of the month, I print out the calendar for that month and try to plan out where I think work will fall on the days of the month.&lt;/p&gt;
&lt;p&gt;I’ll also plan out anything that I want to do on a monthly basis.&lt;/p&gt;
&lt;p&gt;I’ll simply take items from my quarterly outline and see what I can fit on the calendar.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 243&lt;/p&gt;
&lt;p&gt;I schedule all of these tasks by creating cards in Trello or Kanbanflow. For each card, I estimate how long it will take in pomodori (which are each 25 minutes of focused work). I assume that I can get about 10 pomodori done each day. I make sure to add these tasks first, because I know they need to get done each week.&lt;/p&gt;
&lt;p&gt;Once I’ve added the mandatory tasks for the week, I go through my calendar and see if there are any fixed appointments that will take up time during the day. For those days, I’ll either create cards to represent those appointments—if they’re work-related—or I’ll reduce the number of pomodori I expect to complete that day.&lt;/p&gt;
&lt;p&gt;Finally, I’ll slot in whatever work I plan to get done that week. I’ll add cards for each task I’d like to get done that week, filling in all the available slots. I usually leave myself a small amount of slack by only scheduling nine pomodori worth of work each day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 244&lt;/p&gt;
&lt;p&gt;Daily planning and execution&lt;/p&gt;
&lt;p&gt;I’ll only reply to email at one set time in the evening. By batching up all my email correspondence at one time, I’m able to get through my email much more efficiently.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 247&lt;/p&gt;
&lt;p&gt;You work only on a single task at a time and give it your complete focus for the full 25 minutes.&lt;/p&gt;
&lt;p&gt;At the end of the 25 minutes, you set a timer for 5 minutes and take a break. That’s considered one pomodoro. After every four pomodori, you take a longer break, usually 15 minutes.&lt;/p&gt;
&lt;p&gt;Technically, if you finish a task early, you’re supposed to dedicate the remaining time to “overlearning.” That is, you continue to work on the task by making small improvements or rereading material if you’re trying to learn something. I tend to ignore this part and move on to the next task immediately.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 248&lt;/p&gt;
&lt;p&gt;The real power of the Pomodoro Technique is using it as a tool to estimate and measure your work. By tracking the count of pomodori done in a day and having a goal of how many to accomplish in a day, you’re suddenly given the power to truly gauge how hard you worked in a day and what your true capacity is.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 254&lt;/p&gt;
&lt;p&gt;I started applying a weekly quota of doing one blog post per week and added quotas for other things I wanted to make sure I got done regularly, like creating YouTube videos and podcasts. I created a quota for everything I did that I needed to do more than once. I quantified exactly how frequently I’d do any repeatable task. It could be once a month, four times a week, or twice a day. If I was going to repeat it, I was going to define how often, and I was going to make a commitment about it. Rain or shine, I was going to do what I committed to. I took these quotas very seriously.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 256&lt;/p&gt;
&lt;p&gt;The whole system falls apart if your commitment is weak, so you have to choose attainable and maintainable quotas. Don’t commit yourself to something you know you can’t do; otherwise you’re setting yourself up for failure. Start with small commitments and make them bolder as you become successful at reaching them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 259&lt;/p&gt;
&lt;p&gt;It’s important to develop a sense of self-accountability to be productive when no one is looking. You could also call this having character or integrity, because they’re all part of the same idea.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 264&lt;/p&gt;
&lt;p&gt;if you’re having trouble with multitasking during the day because there are multiple tasks you have to get done, you’ll probably be better off learning how to batch those tasks and work on a series of related tasks all at once rather than splitting them up throughout the day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 273&lt;/p&gt;
&lt;p&gt;The biggest problem with TV is that there’s no actual benefit from the time you spend watching it. Unless you’re purely watching educational programs, you’re basically wasting time. Time would be better spent on literally just about anything else.&lt;/p&gt;
&lt;p&gt;Not only is TV watching a time waster, but it also has the ability to influence you in ways that you aren’t likely aware of. TV programs short-circuit the problem-solving part of your brain and lay everything out for you. Everything from your spending habits to your world view is directly influenced by TV. The more you watch, the more you’re giving up control of your own mind and actions. The TV is literally programing you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 286&lt;/p&gt;
&lt;p&gt;The best way to identify your bad habits is to try to find things in your life and routine that you feel guilty about. What are the things that you want to stop doing, but you always put off for another day?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 289&lt;/p&gt;
&lt;p&gt;When faced with large problems we tend to spend more time thinking about the problem than taking steps to solve the problem. Humans tend to take the path of least resistance. When faced with a big task, checking your email or getting another cup of coffee almost always seems like the easier path, so procrastination ensues.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 290&lt;/p&gt;
&lt;p&gt;The bigger a task, the less it tends to be defined.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 290&lt;/p&gt;
&lt;p&gt;Big tasks also tend to be very difficult to estimate.&lt;/p&gt;
&lt;p&gt;Bigger tasks are mentally challenging, more likely to bring about procrastination, generally less descriptive, error-prone, and more difficult to estimate than smaller tasks.&lt;/p&gt;
&lt;p&gt;Breaking down large tasks into smaller ones is one of the techniques I use all the time to get more work done and to have more accurate estimates of how long the work will take me to do.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 292&lt;/p&gt;
&lt;p&gt;If you want to take a large task and make it less intimidating, you need to start by determining what steps need to be done to complete the task.&lt;/p&gt;
&lt;p&gt;A critical step of breaking down a large task into smaller ones is identifying what information is missing that’s preventing you from creating smaller, well-defined tasks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 295&lt;/p&gt;
&lt;p&gt;Everyone who promises greater results with less work is trying to sell you something, or they have forgotten how hard they had to work to get to where they are.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 311&lt;/p&gt;
&lt;p&gt;The money you make each paycheck is money you have to work for. The money your assets generate for you each month is money that you didn’t have to work for. If you can use more of the money you have to work for to buy assets that generate money you don’t have to work for, you’ll eventually make more money while doing the same amount of work or less. If you spend money you work for to buy liabilities that cost you money each month, you’ll go the opposite direction and be forced to work harder to make more money to continue to pay for the upkeep costs on those liabilities.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 312&lt;/p&gt;
&lt;p&gt;if I wanted to actually be rich someday, not only would I have to not waste my paycheck on liabilities that would bring me down, but I’d also have to invest a significant portion of that paycheck in assets that would eventually earn me more money.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 313&lt;/p&gt;
&lt;p&gt;Even if you work your entire life and sock away as much money as possible, you’ll never become rich or even financially independent unless you find a way to make your money work for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 322&lt;/p&gt;
&lt;p&gt;An option is exactly what it sounds like: the choice to do something or not to do something. The basic idea behind an option is to allow someone to pay for the option of either buying or selling a stock by a later date in the future.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 324&lt;/p&gt;
&lt;p&gt;Options basically give you the option to buy a certain number of shares of a stock by some date in the future for a fixed price. But you can also buy an option that lets you sell a certain number of shares of a stock by some day in the future for a fixed price as well. This kind of option would allow you to make money if a stock dropped in value, just like shorting a stock does,&lt;/p&gt;
&lt;p&gt;An option that lets you buy a stock at a certain price within a period of time is called a call option. An option that lets you sell a stock at a certain price within a period of time is called a put option.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 326&lt;/p&gt;
&lt;p&gt;Options give you the leverage to either make or lose more money much more quickly.&lt;/p&gt;
&lt;p&gt;When you write an option, you’re taking the other side of the bet. Instead of betting that a stock will move in one direction, you’re betting that it will either stay where it is now or move in the opposite direction of the option.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 327&lt;/p&gt;
&lt;p&gt;A covered call is when you buy some stock, but at the same time you sell a call option against that stock.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 328&lt;/p&gt;
&lt;p&gt;Another strategy is what’s called a married put. This occurs when you buy a stock, but at the same time buy a put option on that stock that allows you to sell that stock.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 333&lt;/p&gt;
&lt;p&gt;The general strategy—or at least the one I recommend—is to buy rental properties that are either cash-flow positive or floating and to finance them using 30-year-fixed loans. This strategy carries very little risk and still has an enormous upside, if you happen to hit a real estate boon and prices rocket upwards, but it also virtually guarantees you paid-off properties in 30 years’ time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 338&lt;/p&gt;
&lt;p&gt;The key to planning your retirement is being able to work backwards by calculating exactly the amount of money you need to live on each month and figuring out how you can guarantee that kind of passive income with at least a little buffer for some breathing room.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 340&lt;/p&gt;
&lt;p&gt;To live off of passive income that’s generated from some amount of capital, you first have to generate that capital.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 344&lt;/p&gt;
&lt;p&gt;You have to gradually work your way up, always with the goal of increasing your passive income. The more money you’re able to generate from assets that you hold, the more progress you’ll be able to make in buying more income-generating assets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 349&lt;/p&gt;
&lt;p&gt;pour as much money as you can each month into your highest-interest debt and keep doing that until all of your debt is paid off.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 352&lt;/p&gt;
&lt;p&gt;I define retirement as freedom. To be more specific: financial freedom. The ability to not be forced to spend your time in a way that you don’t choose to spend your time due to financial constraints.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 388&lt;/p&gt;
&lt;p&gt;If you do a small number of reps with a fairly high rest period between sets, you’ll primarily cause your muscles to adapt by growing stronger.&lt;/p&gt;
&lt;p&gt;Typically, if gaining strength is your goal, you’ll want to have reps that are in the one to six range. But limiting the reps isn’t enough. You’ll want to lift as the heaviest weights you can for that rep range.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 389&lt;/p&gt;
&lt;p&gt;Muscle size is primarily achieved by medium rep ranges with moderate rest times in between.&lt;/p&gt;
&lt;p&gt;To achieve maximum muscle size, you want to try to hit rep ranges between about 8 and 12.&lt;/p&gt;
&lt;p&gt;To achieve muscular endurance increase, you want to have rep ranges above 12. You might do 20 reps or more to increase your muscular endurance. But be warned: if you focus on muscular endurance, you won’t see much of an increase in size—you might even see a decrease.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 390&lt;/p&gt;
&lt;p&gt;I divide exercises into three categories: push, pull, and legs. Push exercises are exercises where you’re pushing the weight away from you. These exercises usually use your chest (pectorals), shoulders (delts), and triceps. Pull exercises are exercises where you’re pulling the weight toward you. These exercises usually use your back and biceps. Finally, leg exercises work&amp;hellip;well&amp;hellip;your legs, of course.&lt;/p&gt;
&lt;p&gt;Once you’ve been doing full-body workouts for about two to three weeks, you can progress to splitting up your workouts to either a two-day split of upper body and lower body or a three-day split of push, pull, and legs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 392&lt;/p&gt;
&lt;p&gt;The general strategy for picking good exercises is that you want to do as many compound movements as possible. Compound movements are lifts that involve multiple joints. The more joints involved, the more muscles involved, so the bigger the bang for your buck.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 396&lt;/p&gt;
&lt;p&gt;The bad news is that to get abs, you’ll have to do something infinitely more difficult—you’ll have to have the discipline to drop your body fat to a very low percentage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 419&lt;/p&gt;
&lt;p&gt;The root of positive thinking is this belief that you’re greater than your mere circumstances. It’s the view that there are good things ahead, because regardless of the situation, you have the power to change and alter your own future.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 458&lt;/p&gt;
&lt;p&gt;These market makers set the bid and ask prices for a stock and make their money by collecting the difference. If I sell a share of a stock for the ask price of $19 and at that same moment you buy that stock for the bid price of $20, the $1 difference is collected by the market maker. You don’t trade stocks directly with other traders in the stock market; instead, everyone goes through market makers who set the bid and ask prices and keep the trading flowing. Without market makers, the liquidity of the stock market would suffer. If everyone was trying to sell a particular stock and no one wanted to buy that stock, you’d have a difficult time selling shares of your stock. You might have to severely discount the price of your shares to get a buyer or you might have to wait a very long time. In today’s market, most trades happen instantly thanks to market makers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 459&lt;/p&gt;
&lt;p&gt;When you short a stock, you borrow shares of that stock and sell those shares. This puts you in what is called a short position. You eventually have to cover that short position by buying back shares to replace the ones you borrowed. If you buy back those shares at a lower price than you sold the borrowed shares for, you make money.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 460&lt;/p&gt;
&lt;p&gt;Some stocks pay what’s called a dividend. A dividend is basically some extra profit the company made that it’s sharing with its shareholders instead of reinvesting in the company. Usually, only big companies pay dividends.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Page 470&lt;/p&gt;
&lt;p&gt;Overall, what are “healthy” foods? In general, the foods that are the healthiest aren’t processed—whole foods like chicken, vegetables, fruits, sweet potatoes, brown rice, eggs, oatmeal, nuts, and fish. Again, these foods aren’t necessarily a lot healthier than other types of foods, but in general, you’ll find that these foods are less dense calorie-wise and provide the basic nutrients you need.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
     </item>
   
     <item>
       <title>工具 | Kindle &#34;My Clippings.txt&#34; 的轉檔 gem KCFU</title>
       <link>https://raviwu.github.io/posts/tools-kcfu-for-kindle-clipping/</link>
       <pubDate>Sat, 28 Jan 2017 13:33:09 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/tools-kcfu-for-kindle-clipping/</guid>
       <description>&lt;p&gt;Kindle 的剪貼簿功能雖然在 Kindle 上很好用，但真的要抽出來另外處理書摘的時候還真的麻煩，因為 &lt;code&gt;My Clippings.txt&lt;/code&gt; 就是一個很簡單的純文字檔，每次在 Kindle 上面 hightlight / bookmark / notes 時就會依照書的 title 去新增一段特定格式的文字段落，所以如果同時看很多本的時候，打開 &lt;code&gt;My Clippings.txt&lt;/code&gt; 會發現裡面就依照 clippings 時序夾雜著來自不同書裡的內容，得再經過一些處理才能分成不同的來源。&lt;/p&gt;
&lt;p&gt;原先有找到 &lt;a href=&#34;http://sebpearce.com/blog/firewood/&#34;&gt;firewood&lt;/a&gt; 這個套件，不過沒辦法在我的電腦上使用 QQ，乾脆就自己刻個輪子吧。&lt;/p&gt;
&lt;p&gt;GitHub 上面的 &lt;a href=&#34;https://github.com/georgboe/kindleclippings&#34;&gt;kindleclippings&lt;/a&gt; 是用 Ruby 寫的，簡單又方便使用，站在小巨人的肩膀上刻了一個 &lt;a href=&#34;https://github.com/raviwu/kcfu&#34;&gt;kcfu&lt;/a&gt; 來做基本的拆分檔案，另外加配了一個陽春的 Markdown 格式轉換器方便做書摘。&lt;/p&gt;
&lt;p&gt;最簡單的用法是開一個資料夾，把你的 &lt;code&gt;My Clippings.txt&lt;/code&gt; 放到裡面，再寫個小 Ruby 檔：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# kcfu.rb&lt;/span&gt;
require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kcfu&amp;#39;&lt;/span&gt;

parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Kcfu&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FileUtil&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse_file(&lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expand_path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname(__FILE__)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/My Clippings.txt&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;convert&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:markdown&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後安裝 KCFU（沒有安裝 Ruby 的同學若要服用請先安裝 &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt; 跟 ruby ）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gem install kcfu

&lt;span style=&#34;color:#75715e&#34;&gt;# Under folder of your kcfu.rb and &amp;#39;My Clippings.txt&amp;#39; file&lt;/span&gt;
ruby kcfu.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就搞定了。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>在 Trailblazer 的 Policy 中透過客制 Exception 來處理複雜的「錯誤回應」</title>
       <link>https://raviwu.github.io/posts/customize-error-handlement-in-trailblazer-policy/</link>
       <pubDate>Sat, 14 Jan 2017 13:25:31 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/customize-error-handlement-in-trailblazer-policy/</guid>
       <description>&lt;p&gt;為了盡量貼近 Trailblazer 的設計概念，許多原先會透過 Controller &lt;code&gt;before_action&lt;/code&gt; 去處理的權限管控，盡量都搬進 Trailblazer 的 &lt;a href=&#34;http://trailblazer.to/gems/operation/1.1/policy.html&#34;&gt;Policy&lt;/a&gt; 裡。&lt;/p&gt;
&lt;p&gt;Policy 採用類似 &lt;a href=&#34;https://github.com/elabs/pundit&#34;&gt;Pundit&lt;/a&gt; 的語法，典型的 Policy 如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Policy&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(user, thing)
    @user, @thing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; user, thing
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create?&lt;/span&gt;
    (admin? &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; approved?) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; @thing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;persisted?
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;admin?&lt;/span&gt;
    @user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;admin &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;approved?&lt;/span&gt;
    @user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_approved
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Operation 中若要調用這隻 Policy 的話要宣告：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Create&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Trailblazer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Operation&lt;/span&gt;
    builds &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (params) { dispatched_class_accroding_to(params) }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dispatched_class_accroding_to&lt;/span&gt;(params)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Create&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Trailblazer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Operation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Policy&lt;/span&gt;
    policy &lt;span style=&#34;color:#66d9ef&#34;&gt;Thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Policy&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:create?&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;(params)
    validate(params&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;f&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
        f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Operation 在 controller 裡被 &lt;code&gt;call&lt;/code&gt; 的時候，會先跑 &lt;code&gt;builds&lt;/code&gt; 去回傳 Operation 類別，此時，正是個機會去依照 params 內容 dispatch 到其他的 Operation 去，改天再分享利用 &lt;code&gt;builds&lt;/code&gt; 簡化路由的實作。&lt;/p&gt;
&lt;p&gt;透過 builds 確認 operation 後，所有的參數會先經過 &lt;code&gt;setup!(params)&lt;/code&gt; &amp;gt; &lt;code&gt;setup_params!(params)&lt;/code&gt; &amp;gt; &lt;code&gt;model!(params)&lt;/code&gt; &amp;gt; &lt;code&gt;setup_model!&lt;/code&gt; 等 operation 的 method 去建立這隻 operation 操作所需的背景條件（基本上都是要依照條件去撈 model 出來，或是要對參數做前處理等，詳細 callstack 請參考這個&lt;a href=&#34;http://trailblazer.to/gems/operation/1.1/api.html&#34;&gt;頁面&lt;/a&gt;），跑完整個 setup 的過程後，如果有指定 Policy 才會送進 Policy 的對應 method 裡。&lt;/p&gt;
&lt;p&gt;Policy initialize 裡的 &lt;code&gt;user&lt;/code&gt; 跟 &lt;code&gt;thing&lt;/code&gt; 對應到 &lt;code&gt;params[:current_user]&lt;/code&gt; 跟 &lt;code&gt;operation.model&lt;/code&gt; 這兩個物件，前述的 &lt;code&gt;params[:current_user]&lt;/code&gt; 如果跑完 &lt;code&gt;setup!(params)&lt;/code&gt; &amp;gt; &lt;code&gt;setup_params!(params)&lt;/code&gt; &amp;gt; &lt;code&gt;model!(params)&lt;/code&gt; &amp;gt; &lt;code&gt;setup_model!&lt;/code&gt; 都沒有指定的話會預設 &lt;code&gt;nil&lt;/code&gt; 值，而 &lt;code&gt;operation.model&lt;/code&gt; 則是 &lt;code&gt;model!(params)&lt;/code&gt; &amp;gt; &lt;code&gt;setup_model!&lt;/code&gt; 中所指定的 resource。如果 &lt;code&gt;user&lt;/code&gt; / &lt;code&gt;thing&lt;/code&gt; 的狀態在 &lt;code&gt;Thing::Policy#create?&lt;/code&gt; 裡的運算結果為 &lt;code&gt;true&lt;/code&gt; 時，才會繼續送到 &lt;code&gt;process(params)&lt;/code&gt; 的方法中繼續處理，不然就會丟 &lt;code&gt;Trailblazer::NotAuthorizedError&lt;/code&gt; 例外。&lt;/p&gt;
&lt;p&gt;問題來了，在 controller 裡面，案例給的很乾淨：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommentsController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ApplicationController&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;
    run &lt;span style=&#34;color:#66d9ef&#34;&gt;Comment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
        flash&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:notice&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Success!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# only run for successful/valid operation.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; redirect_to thing_path(@model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;thing)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    render &lt;span style=&#34;color:#e6db74&#34;&gt;:new&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但如果需要針對不同的 &lt;code&gt;Trailblazer::NotAuthorizedError&lt;/code&gt; 情況來轉址或者是設定錯誤訊息，在只使用 &lt;code&gt;Trailblazer::NotAuthorizedError&lt;/code&gt; 的情況下，變成要在 controller 端另外加判斷，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommentsController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ApplicationController&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;
    run &lt;span style=&#34;color:#66d9ef&#34;&gt;Comment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
        flash&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:notice&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Success!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# only run for successful/valid operation.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; redirect_to thing_path(@model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;thing)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    render &lt;span style=&#34;color:#e6db74&#34;&gt;:new&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;rescue&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Trailblazer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NotAuthorizedError&lt;/span&gt;
    flash&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:alert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You&amp;#39;re not Admin!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; @user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;admin
    flash&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:alert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your account is not approved!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; @user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_approved

    redirect_to root_path
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安捏很奇怪，因為權限在 Policy 裡面判斷了一次，然後跑到 controller 裡又得再重新跑一次幾乎一樣的判斷，目前暫時的解法，是在 Policy 裡面加一個 custom error 讓 controller 統一處理需要特別關照的 &lt;code&gt;Trailblazer::NotAuthorizedError&lt;/code&gt; 狀況。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Thing
    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Policy&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(user, thing)
        @user, @thing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; user, thing
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create?&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NotAuthorizedError&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You&amp;#39;re not Admin!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; admin?
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NotAuthorizedError&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your account is not approved!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; approved?
        @thing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;persisted?
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;admin?&lt;/span&gt;
        @user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;admin &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;approved?&lt;/span&gt;
        @user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_approved
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotAuthorizedError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;StandardError&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# in controller&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommentsController&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ApplicationController&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;
    run &lt;span style=&#34;color:#66d9ef&#34;&gt;Comment&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
        flash&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:notice&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Success!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# only run for successful/valid operation.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; redirect_to thing_path(@model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;thing)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    render &lt;span style=&#34;color:#e6db74&#34;&gt;:new&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;rescue&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Thing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NotAuthorizedError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; e
    flash&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:alert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;message
    redirect_to root_path
    &lt;span style=&#34;color:#66d9ef&#34;&gt;rescue&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Trailblazer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;NotAuthorizedError&lt;/span&gt;
    flash&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:alert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Action not authorized.&amp;#34;&lt;/span&gt;
    redirect_to root_path
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;改成這樣後，雖然 controller 還是對於例外細節如何處理仍有耦合，但至少邏輯判斷不再在 Policy / Controller 裡重複，然後也能進一步將一般性的 &lt;code&gt;Trailblazer::NotAuthorizedError&lt;/code&gt; 抽到 ApplicationController 裡面統一處理，對於一些複雜的例外處理需求，目前這麼做還算暫時可以接受，如果你有發現其他更好的方式，跪求指教。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>初探 Trailblazer 框架</title>
       <link>https://raviwu.github.io/posts/elementary-trailblazer/</link>
       <pubDate>Sat, 07 Jan 2017 13:23:29 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/elementary-trailblazer/</guid>
       <description>&lt;p&gt;最近公司的 Rails 專案試用了 &lt;a href=&#34;http://trailblazer.to/&#34;&gt;Trailblazer&lt;/a&gt; 這套整理 Rails 程式碼的框架。（目前使用的是 1.1 版）&lt;/p&gt;
&lt;p&gt;Trailblazer 是擺在 Rails 上的一套工具，雖然有本&lt;a href=&#34;https://leanpub.com/trailblazer&#34;&gt;專書&lt;/a&gt;可以翻找，但實際上就是個自成一格的整理程式碼套路，除了要學新的 DSL 外，在 API 文件沒有寫得非常詳細，加上使用者也沒多到可以 stackoverflow 的情況下，假如開發需求和設計者 &lt;a href=&#34;https://github.com/apotonick&#34;&gt;Nick Sutterer&lt;/a&gt; 設想的情況不一樣時，小小撞牆是難免的。&lt;/p&gt;
&lt;p&gt;Trailblazer 是模組化設計，所以並非所有模組需要安裝才能開始享受 Trailblazer 帶來的方便感，除了主要的 Operation / Policy / Contract / Cell 等稍微有摸過外，其他的眉眉角角尚待開發。稍微整理一下截至目前為止使用這套框架的個人認知，這套 Trailblazer 的目的是將原先 Rails 單純 MVC 架構下可能會散亂在 Controller / Model 層的商業邏輯，集中起來包在 &lt;a href=&#34;http://trailblazer.to/gems/operation/1.1/index.html&#34;&gt;Operation&lt;/a&gt; 的概念裡，（在理想狀況下）分別簡化日益肥大的 Controller / Model / View 邏輯：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Controller
&lt;ul&gt;
&lt;li&gt;讓 controller 單純負責傳送 current_user / resource 到正確的 operation 並視操作結果導向相對應的路由&lt;/li&gt;
&lt;li&gt;權限控管交給 &lt;a href=&#34;http://trailblazer.to/gems/operation/1.1/policy.html&#34;&gt;Policy&lt;/a&gt; 處理，用 controller 塞給 operation 的 &lt;code&gt;current_user&lt;/code&gt; 配合 operation 的 &lt;code&gt;model!(param)&lt;/code&gt; method 所傳回之 resource 兩者之間的關係去做權限控管&lt;/li&gt;
&lt;li&gt;商業邏輯封裝在 Operation 裡&lt;/li&gt;
&lt;li&gt;只傳送成功執行 operation 後的 &lt;code&gt;@model&lt;/code&gt; (resource) 給 view&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Model
&lt;ul&gt;
&lt;li&gt;讓 Model 單純負責與資料庫之間的溝通，原先的 Validation 改由 Contract 操作&lt;/li&gt;
&lt;li&gt;本來可能塞在 Model 裡的各種 &lt;code&gt;before_validation&lt;/code&gt; &lt;code&gt;before_save&lt;/code&gt; 等 callbacks 拉出來改在 operation 的 process 裡面操作&lt;/li&gt;
&lt;li&gt;本來塞在 “fat model” 裡的商業邏輯，一樣抽出來寫在相對應的 operation 裡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;View
&lt;ul&gt;
&lt;li&gt;減少原先直接吃 controller instance variables 並在 erb 或 global helper 裡面塞各種邏輯判斷的情況，把 controller 傳過來的 &lt;code&gt;@model&lt;/code&gt; 傳到相對應的 Cell 裡面去處理。&lt;/li&gt;
&lt;li&gt;Cell 結合 Reform 可以做出複雜的 form 格式，由於已經透過抽象化，所以複雜 form 的參數不再直接對應到 Model 上，而是綁在 contract attribute 上，屬性的自由度可以大幅增加，透過 &lt;a href=&#34;http://trailblazer.to/gems/reform/prepopulator.html&#34;&gt;prepopulator&lt;/a&gt; 去準備需要呈現的 &lt;code&gt;@contract&lt;/code&gt;，餵進 controller 的參數也可以透過 &lt;a href=&#34;http://trailblazer.to/gems/reform/populator.html&#34;&gt;populator&lt;/a&gt; 做處理，讓 Cell 可以用 form_for 的方式去打包 contract 以簡化 view code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他尚未摸到邊但好像不錯用的模組是 &lt;a href=&#34;http://trailblazer.to/gems/representable/&#34;&gt;Representable&lt;/a&gt; 跟 &lt;a href=&#34;http://trailblazer.to/gems/roar/jsonapi.html&#34;&gt;Roar&lt;/a&gt; ，主要用在做 API 上，有心得再補上。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>筆記 | Practical Object-Oriented Design in Ruby (POODR)</title>
       <link>https://raviwu.github.io/posts/notes-of-poodr/</link>
       <pubDate>Tue, 03 Jan 2017 13:20:41 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/notes-of-poodr/</guid>
       <description>&lt;p&gt;&lt;a href=&#34;http://www.poodr.com/&#34;&gt;Practical Object-Oriented Design in Ruby (POODR)&lt;/a&gt; 不會很厚，循序漸進地介紹物件導向設計的各種重要概念，而且範例用的是 Ruby 來解說，挺親切的。&lt;/p&gt;
&lt;p&gt;除了各種設計原則之外，也簡要解釋了 Inheritance / Module / Composition 的使用時機與差異。&lt;/p&gt;
&lt;p&gt;最後一章介紹測試原則，除了說明一般的測試原則之外（例如主要應測試 public interface / incoming message / outgoing command ），也很清楚地說明要怎樣去分別把不同的測試責任分在 module / test double / test class 上，以及讓 test double 與實際的程式碼同步的技巧，可以反覆閱讀的參考書。&lt;/p&gt;
&lt;h1 id=&#34;chapter-1---object-oriented-design&#34;&gt;Chapter 1 - Object-Oriented Design&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;P.4&lt;/p&gt;
&lt;p&gt;Practical design does not anticipate what will happen to your application, it merely accepts that something will and that, in the present, you cannot know what. It doesn’t guess the future; it preserves your options for accommodating the future. It doesn’t choose; it leaves you room to move.
The purpose of design is to allow you to do design later and its primary goal is to reduce the cost of change.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;P.63&lt;/p&gt;
&lt;p&gt;The design goal, as always, is to retain maximum future flexibility while writing only enough code to meet today’s requirements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;design-principles&#34;&gt;Design Principles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Single Responsibility&lt;/li&gt;
&lt;li&gt;Open-Closed&lt;/li&gt;
&lt;li&gt;Liskov Substitution&lt;/li&gt;
&lt;li&gt;Interface Segregation&lt;/li&gt;
&lt;li&gt;Dependency Inversion&lt;/li&gt;
&lt;li&gt;DRY (Don&amp;rsquo;t Repeat Yourself)&lt;/li&gt;
&lt;li&gt;LoD (Law of Demeter)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;design-patterns&#34;&gt;Design Patterns&lt;/h2&gt;
&lt;p&gt;Specific patterns are aim to solve specific problem, only apply pattern on the problem if the problem is what that pattern aims to solve.&lt;/p&gt;
&lt;h1 id=&#34;chapter-2---designing-classes-with-a-single-responsibility&#34;&gt;Chapter 2 - Designing Classes with a Single Responsibility&lt;/h1&gt;
&lt;p&gt;What means easy to change in Programming?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change has no unexpected side effects&lt;/li&gt;
&lt;li&gt;Small changes in requirements require correspondingly small changes in code&lt;/li&gt;
&lt;li&gt;Existing code is easy to reuse&lt;/li&gt;
&lt;li&gt;The easiest way to make a change is to add code that in itself is easy to change&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code should be&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transparent: The consequences of changes should be obvious in the code that is changing and in distant code that relies upon it&lt;/li&gt;
&lt;li&gt;Resonable: The cost of any change should be proportional to the benefits the change achieves&lt;/li&gt;
&lt;li&gt;Usable: Existing code should be usable in new and unexpected contexts&lt;/li&gt;
&lt;li&gt;Exemplary: The code itself should encourage those who change it to perperuate these qualities&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How to help find out whether a Class is having single responsibility:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ask questions like: ‘Dear Mr. Gear, what is your ratio?’, ‘Dear Mr. Gear, what is your tire size?’, if the question seems like asking the wrong guys, then the responsibility is probably belongs to others.&lt;/li&gt;
&lt;li&gt;Use one sentenct to describe the class. The sentence should not have ‘and’ or ‘or’ that indicating out the class is doing more than one thing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tips to write code embraces change:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Depends on behavior, not data.
&lt;ul&gt;
&lt;li&gt;Always wrap instance variables in accessor methods instead of directly referring to variables.&lt;/li&gt;
&lt;li&gt;Hide data structure, if a object relying on a data argument like &lt;code&gt;locations = [[5, 12], [2, 3], [4, 2]]&lt;/code&gt; wherein each &lt;code&gt;location[0]&lt;/code&gt; means &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;location[1]&lt;/code&gt; means &lt;code&gt;y&lt;/code&gt;, then better wrap the &lt;code&gt;location&lt;/code&gt; to a Location Class that stores x and y as its property. Ruby has a convinient &lt;code&gt;Struct&lt;/code&gt; class to easily provide simple object that stores the data and creates methods to response with stored data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extract Responsibilities from methods. Method itself should be single responsibility if possible, benifits to extract reponsibilities from methods:
&lt;ul&gt;
&lt;li&gt;Expose previously hidden qualities: refactoring a class so that all of its methods have a single responsibility has a clarifying effect on the class.&lt;/li&gt;
&lt;li&gt;Avoid the need for comments&lt;/li&gt;
&lt;li&gt;Encourage reuse&lt;/li&gt;
&lt;li&gt;Easy to move to another class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Isolate Extra Responsibilities in Classes&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;chapter-3---managing-dependencies&#34;&gt;Chapter 3 - Managing Dependencies&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;P.35&lt;/p&gt;
&lt;p&gt;Because well designed objects have a single responsibility, their very nature requires that they collaborate to accomplish complex tasks. This collaboration is powerful and perilous. To collaborate, an object must know something know about others. Knowing creates a dependency. If not managed carefully, these dependencies will strangle your application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;recognizing-dependencies&#34;&gt;Recognizing Dependencies&lt;/h2&gt;
&lt;p&gt;An object has a dependency when it knows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The name of another class&lt;/li&gt;
&lt;li&gt;The name of a message that it intends to send to someone other than self&lt;/li&gt;
&lt;li&gt;The arguments that a message requires&lt;/li&gt;
&lt;li&gt;The order of those arguments&lt;/li&gt;
&lt;li&gt;Other Dependencies:
&lt;ul&gt;
&lt;li&gt;a object knowing the name of a message you plan to send to someone other than &lt;code&gt;self&lt;/code&gt;, this is a violation of LoD, can be resolve by flexible interface, checkout chapter 4 creating flexible interfaces&lt;/li&gt;
&lt;li&gt;test depends on code, checkout chapter 9 designing cost-effective tests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;resolving-dependencies&#34;&gt;Resolving Dependencies&lt;/h2&gt;
&lt;h3 id=&#34;inject-dependencies&#34;&gt;Inject Dependencies&lt;/h3&gt;
&lt;p&gt;Try not to hard code dependencies, use &amp;lsquo;message&amp;rsquo; the method or the class really cares:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gear&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:chainring&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:cog&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:rim&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:tire&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(chainring, cog, rim, tire)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# hard code the Wheel in gear_inches method&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# call this method with Gear.new(52, 11, 26, 1.5).gear_inches#&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gear_inches&lt;/span&gt;
    ratio &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Wheel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(rim, tire)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;diameter
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gear&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:chaining&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:cog&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:wheel&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(chainring, cog, wheel)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# Moving the creation of Wheel outside the Gear class, decoupling the Wheel and Gear class.&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# call this method with Gear.new(52, 11, Wheel.new(26, 1.5)).gear_inches&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gear_inches&lt;/span&gt;
    ratio &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; wheel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;diameter
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;isolate-dependencies&#34;&gt;Isolate Dependencies&lt;/h3&gt;
&lt;p&gt;Prepare a space to isolate dependencies within given zone&lt;/p&gt;
&lt;h4 id=&#34;isolate-instance-creation&#34;&gt;Isolate Instance creation&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Create Dependencies when initialize&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gear&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:chainring&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:cog&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:wheel&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(chainring, cog, rim, tire)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    @wheel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Wheel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(rim, tire)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gear_inches&lt;/span&gt;
    ratio &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; wheel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;diameter
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Isolate the Dependency in method&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gear&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:chainring&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:cog&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:rim&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:tire&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(chainring, cog, rim, tire)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gear_inches&lt;/span&gt;
    ratio &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; wheel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;diameter
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wheel&lt;/span&gt;
    @wheel &lt;span style=&#34;color:#f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Wheel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(rim, tire)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;isolate-vulnerable-external-messages&#34;&gt;Isolate Vulnerable External Messages&lt;/h4&gt;
&lt;p&gt;external messages: messasges that are &amp;lsquo;send to someone other than &lt;code&gt;self&lt;/code&gt;&amp;rsquo;&lt;/p&gt;
&lt;p&gt;This refactor depends on whether this extraction is worth to be DRYed out.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gear_inches&lt;/span&gt;
  ratio &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; diameter
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;diameter&lt;/span&gt;
  wheel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;diameter
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;remove-augument-order-dependencies&#34;&gt;Remove Augument-Order Dependencies&lt;/h3&gt;
&lt;p&gt;Use args Hash to initialize the object, keys does not has order issue.&lt;/p&gt;
&lt;p&gt;Explicity define default or raise argument error in case the argument does not provide required values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# this line will fall back to default value 18 whenever the args[:cog] are evaluated to false,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# in other word, if args[:cog] are assigned to &amp;#39;false&amp;#39; then @cog will be assigned to 18&lt;/span&gt;
@cog &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:cog&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# To use the provided value whenever the key existed, can use fetch&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# the default value is assigned only when the fetched key does not exist&lt;/span&gt;
@cog &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fetch(&lt;span style=&#34;color:#e6db74&#34;&gt;:cog&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# have a default hash to be merged is another solution&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;default_args&lt;/span&gt;
  { &lt;span style=&#34;color:#e6db74&#34;&gt;cog&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; }
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(args)
  args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; default_args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(args)
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  @cog &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:cog&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the object belongs to external libs, then constructing a &lt;code&gt;LibObjectWrapper&lt;/code&gt; for that object that use Hash parameter to initialize &lt;code&gt;LibObject&lt;/code&gt; instead of a ordered argument array might worth the efforts. This is called factory patterns. An object whose purpose is to create other objects is a factory; the word factory implies nothing more, and use of it is the most expedient way to communicate this idea.&lt;/p&gt;
&lt;h2 id=&#34;manageing-dependency-direction&#34;&gt;Manageing Dependency Direction&lt;/h2&gt;
&lt;p&gt;Object should depend on the Class that tends to have less changes if possible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some classes are more likely than others to have changes in requirements.&lt;/li&gt;
&lt;li&gt;Concrete classes are more likely to change than abstract classes.&lt;/li&gt;
&lt;li&gt;Changing a class that has many dependents will result in widespread consequences.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Gear depends on Wheel&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gear&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:chainring&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:cog&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:wheel&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(chainring, cog, rim, tire)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    @wheel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Wheel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(rim, tire)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gear_inches&lt;/span&gt;
    ratio &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; wheel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;diameter
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Wheel depends on Gear&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gear&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:chainring&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:cog&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(chainring, cog)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gear_inches&lt;/span&gt;(diameter)
    ratio &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; diameter
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Wheel&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:rim&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:tire&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:gear&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(rim, tire, chainring, cog)
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    @gear &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Gear&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(chainring, cog)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;diameter&lt;/span&gt;
    rim &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (tire &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gear_inches&lt;/span&gt;
    gear&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gear_inches(diameter)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;P.57&lt;/p&gt;
&lt;p&gt;Dependency management is core to creating future-proof applications. Injecting dependencies creates loosely coupled objects that can be reused in novel ways. Isolating dependencies allows objects to quickly adapt to unexpected changes. Depending on abstractions decreases the likelihood of facing these changes.&lt;/p&gt;
&lt;p&gt;The key to managing dependencies is to control their direction. The road to maintenance nirvana is paved with classes that depend on things that change less often than they do.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;chapter-4---creating-flexible-interfaces&#34;&gt;Chapter 4 - Creating Flexible Interfaces&lt;/h1&gt;
&lt;p&gt;There are two kinds of interface:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Classes implement methods, some of those methods are intended to be used by others and these methods make up its public interface.&lt;/li&gt;
&lt;li&gt;A set of messages where the messages themselves define the interface. Many different classes may, as part of their whole, implement the methods that the interface requires. It’s almost as if the interface defines a virtual class; that is, any class that implements the required methods can act like the interface kind of thing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This chapter is handling first kind of interface, left the last kind being handled in Chapter 5 - Reducing Costs with Duck Typing.&lt;/p&gt;
&lt;h2 id=&#34;defining-interface&#34;&gt;Defining interface&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Public Interfaces&lt;/strong&gt; The methods that make up the public interface of your class comprise the face it presents to the world. They:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reveal its primary responsibility&lt;/li&gt;
&lt;li&gt;Are expected to be invoked by others&lt;/li&gt;
&lt;li&gt;Will not change on a whim&lt;/li&gt;
&lt;li&gt;Are safe for others to depend on&lt;/li&gt;
&lt;li&gt;Are thoroughly documented in the tests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Private Interfaces&lt;/strong&gt; All other methods in the class are part of its private interface. They:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Handle implementation details&lt;/li&gt;
&lt;li&gt;Are not expected to be sent by other objects&lt;/li&gt;
&lt;li&gt;Can change for any reason whatsoever&lt;/li&gt;
&lt;li&gt;Are unsafe for others to depend on&lt;/li&gt;
&lt;li&gt;May not even be referenced in the tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;using-sequence-diagrams&#34;&gt;Using Sequence Diagrams&lt;/h3&gt;
&lt;p&gt;Illustrating out the message between classes in sequence diagrams can help to visualize the interaction between classes&#39; interfaces.&lt;/p&gt;
&lt;h3 id=&#34;asking-for-what-instead-of-telling-how&#34;&gt;Asking for “What” Instead of Telling “How”&lt;/h3&gt;
&lt;p&gt;Message being sent to object is better to ask result instead of instruct how to perform the action, for instance, &lt;code&gt;Customer&lt;/code&gt; class does not need to instruct &lt;code&gt;place_order&lt;/code&gt;, &lt;code&gt;deduct_stock&lt;/code&gt;, &lt;code&gt;process_payment&lt;/code&gt;, &lt;code&gt;generate_invoice&lt;/code&gt; to &lt;code&gt;Store&lt;/code&gt;. &lt;code&gt;Customer&lt;/code&gt; will be better off by &lt;code&gt;checkout&lt;/code&gt; with his &lt;code&gt;Cart&lt;/code&gt; instance and get a &lt;code&gt;Invoice&lt;/code&gt; back.&lt;/p&gt;
&lt;h3 id=&#34;seeking-context-independence&#34;&gt;Seeking Context Independence&lt;/h3&gt;
&lt;p&gt;The things that &lt;code&gt;DomainClass&lt;/code&gt; knows about other objects make up its context. Context is a coat that &lt;code&gt;DomainClass&lt;/code&gt; wears everywhere; any use of &lt;code&gt;DomainClass&lt;/code&gt;, be it for testing or otherwise, requires that its context be established. Deduce the context of &lt;code&gt;DomainClass&lt;/code&gt; can help to reuse the class and easier to be test with.&lt;/p&gt;
&lt;h3 id=&#34;trusting-other-objects&#34;&gt;Trusting Other Objects&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;DomainClass&lt;/code&gt; just need to provide &lt;code&gt;what&lt;/code&gt; they need and &lt;code&gt;what&lt;/code&gt; they are, then trust the &lt;code&gt;result&lt;/code&gt; that message receiver respond with.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;P.74&lt;/p&gt;
&lt;p&gt;This blind trust is a keystone of object-oriented design. It allows objects to collab- orate without binding themselves to context and is necessary in any application that expects to grow and change.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;using-messages-to-discover-objects&#34;&gt;Using Messages to Discover Objects&lt;/h3&gt;
&lt;p&gt;If you find out current class is handling message that might not be single responsibility enough, then there&amp;rsquo;s a chance that you need a new class to handle this message. For instance, a mailer shall not handle the condition whether not to send out this email, so if there&amp;rsquo;s need to filter out the condition that skipping the mailing action, then you might need to have a new class that picks up this responsibility instead of coding the skip mailing logic within mailer class.&lt;/p&gt;
&lt;h2 id=&#34;writing-code-that-puts-its-best-interface-forward&#34;&gt;Writing Code That Puts Its Best (Inter)Face Forward&lt;/h2&gt;
&lt;h3 id=&#34;create-explicit-interfaces&#34;&gt;Create Explicit Interfaces&lt;/h3&gt;
&lt;p&gt;Every time you create a class, declare its interfaces. Methods in the public interface should&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be explicitly identified as such&lt;/li&gt;
&lt;li&gt;Be more about what than how&lt;/li&gt;
&lt;li&gt;Have names that, insofar as you can anticipate, will not change&lt;/li&gt;
&lt;li&gt;Take a hash as an options parameter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use of &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt; keywords serves two distinct purposes. First, they indicate which methods are stable and which are unstable. Second, they control how visible a method is to other parts of your application.&lt;/p&gt;
&lt;h3 id=&#34;honor-the-public-interfaces-of-others&#34;&gt;Honor the Public Interfaces of Others&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;P.78&lt;/p&gt;
&lt;p&gt;Do your best to interact with other classes using only their public interfaces. &amp;hellip; If your design forces the use of a private method in another class, first rethink your design. It’s possible that a committed effort will unearth an alternative; you should try very hard to find one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If depending on other class&amp;rsquo;s private method is required in your design no matter how hard you try to avoid, isolate the dependencies within safe zone.&lt;/p&gt;
&lt;h2 id=&#34;the-law-of-demeter&#34;&gt;The Law of Demeter&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;P.80&lt;/p&gt;
&lt;p&gt;The Law of Demeter (LoD) is a set of coding rules that results in loosely coupled objects. Loose coupling is nearly always a virtue but is just one component of design and must be balanced against competing needs. Some Demeter violations are harmless, but others expose a failure to correctly identify and define public interfaces.&lt;/p&gt;
&lt;p&gt;Demeter is often paraphrased as “only talk to your immediate neighbors” or “use only one dot.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The risk of violating the LoD is that if there&amp;rsquo;s any change occurs between the chained method&amp;rsquo;s return value, the result of final output might break.&lt;/p&gt;
&lt;p&gt;Code like &lt;code&gt;message.conversation.project.start_project!&lt;/code&gt; will break whenever the implementation of each Class or method call is changed, or when the records does not found in DB. Better avoid a long method chain like this.&lt;/p&gt;
&lt;p&gt;To be clear, a method chain like &lt;code&gt;hash.keys.sort.join&lt;/code&gt; are chaining basic object in Ruby Core that tends to be very stable, this kind of &amp;lsquo;violations&amp;rsquo; would probably not harming the application at all. LoD is more like a recommendation than a restriction.&lt;/p&gt;
&lt;p&gt;Something like &lt;code&gt;message.conversation.project.start_project!&lt;/code&gt; shows that the code is instructing not only &amp;lsquo;what&amp;rsquo; they want, but also &amp;lsquo;I know how exactly to get the thing I want&amp;rsquo;. When this is happening, maybe the caller is appropriate to be responsible to get the result that even though it knows how to get it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;P.83&lt;/p&gt;
&lt;p&gt;Focusing on messages reveals objects that might otherwise be overlooked. When messages are trusting and ask for what the sender wants instead of telling the receiver how to behave, objects naturally evolve public interfaces that are flexible and reusable in novel and unexpected ways.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;chapter-5---reducing-costs-with-duck-typing&#34;&gt;Chapter 5 - Reducing Costs with Duck Typing&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;P.85&lt;/p&gt;
&lt;p&gt;Duck typed objects are chameleons that are defined more by their behavior than by their class. This is how the technique gets its name; if an object quacks like a duck and walks like a duck, then its class is immaterial, it’s a duck.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Use duck typing as a proxy of a group of class that behaves like a duck in the point of the caller&amp;rsquo;s view. If a &lt;code&gt;Trip&lt;/code&gt; instance requires a &lt;code&gt;Preparer&lt;/code&gt; that can handle &lt;code&gt;prepare_trip&lt;/code&gt; message, the &lt;code&gt;Trip&lt;/code&gt; does not cares about whether the preparer is a &lt;code&gt;Bus&lt;/code&gt;, &lt;code&gt;TourGuide&lt;/code&gt;, &lt;code&gt;Mechanic&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Something like below occurs in your code, then you might need a duck:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Case statements that switch on class&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kind_of?&lt;/code&gt; and &lt;code&gt;is_a?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;responds_to?&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Trip has to know exactly the Class of preparer and the public method calls to prepare the trip&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Trip&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:bicycles&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:customers&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:bus&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prepare&lt;/span&gt;(preparers)
    preparers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;preparer&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; preparer
      &lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Mechanic&lt;/span&gt;
        preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;prepare_bicycles(bicycles)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TourGuide&lt;/span&gt;
        preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buy_food(customers)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Driver&lt;/span&gt;
        preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gas_up(bus)
        preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fill_water_tank(bus)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kind_of?(&lt;span style=&#34;color:#66d9ef&#34;&gt;Mechanic&lt;/span&gt;)
  preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;prepare_bycycles(bicycles)
&lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kind_of?(&lt;span style=&#34;color:#66d9ef&#34;&gt;TourGuide&lt;/span&gt;)
  preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buy_food(customers)
&lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kind_of?(&lt;span style=&#34;color:#66d9ef&#34;&gt;Driver&lt;/span&gt;)
  preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gas_up(bus)
  preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fill_water_tank(bus)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;responds_to?(&lt;span style=&#34;color:#e6db74&#34;&gt;:prepare_bicycles&lt;/span&gt;)
  preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;prepare_bycycles(bicycles)
&lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;responds_to?(&lt;span style=&#34;color:#e6db74&#34;&gt;:buy_food&lt;/span&gt;)
  preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buy_food(customers)
&lt;span style=&#34;color:#66d9ef&#34;&gt;elsif&lt;/span&gt; preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;responds_to?(&lt;span style=&#34;color:#e6db74&#34;&gt;:gas_up&lt;/span&gt;)
  preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gas_up(bus)
  preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fill_water_tank(bus)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Changing above code to duck typing will rearrange the public interface between &lt;code&gt;Trip&lt;/code&gt;, &lt;code&gt;Mechanic&lt;/code&gt;, &lt;code&gt;TourGuide&lt;/code&gt;, and &lt;code&gt;Driver&lt;/code&gt;. Instead of letting &lt;code&gt;Trip&lt;/code&gt; knows about how all kinds of preparer class and how to let them prepare things, &lt;code&gt;Trip&lt;/code&gt; only send a &lt;code&gt;prepare_trip&lt;/code&gt; messages to the preparer, and all preparers has to get correct repsonses, whether asking for more inputs or handling the provided ones.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Trip&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prepare&lt;/span&gt;(preparers)
    preparers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each { &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;preparer&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; preparer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;prepare_trip(&lt;span style=&#34;color:#e6db74&#34;&gt;vehicle&lt;/span&gt;: bus, &lt;span style=&#34;color:#e6db74&#34;&gt;customers&lt;/span&gt;: customers, &lt;span style=&#34;color:#e6db74&#34;&gt;bicycles&lt;/span&gt;: bicycles) }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Driver&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prepare_trip&lt;/span&gt;(trip_requirement&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{})
    gas_up(trip_requirement&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:vehicle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)
    fill_water_tank(trip_requirement&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:vehicle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TourGuide&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prepare_trip&lt;/span&gt;(trip_requirement&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{})
    buy_food(trip_requirement&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:customers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mechanic&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prepare_trip&lt;/span&gt;(trip_requirement&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{})
    prepare_bycycles(trip_requirement&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:bicycles&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Better can share the Duck Type code through Modules.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;P104.&lt;/p&gt;
&lt;p&gt;Messages are at the center of object-oriented applications and they pass among objects along public interfaces. Duck typing detaches these public interfaces from specific classes, creating virtual types that are defined by what they do instead of by who they are.&lt;/p&gt;
&lt;p&gt;Duck typing reveals underlying abstractions that might otherwise be invisible. Depending on these abstractions reduces risk and increases flexibility, making your application cheaper to maintain and easier to change.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;chapter-6---acquiring-behavior-through-inheritance&#34;&gt;Chapter 6 - Acquiring Behavior Through Inheritance&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;P105.&lt;/p&gt;
&lt;p&gt;Inheritance is, at its core, a mechanism for automatic message delegation. It defines a forwarding path for not-understood messages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;P112.&lt;/p&gt;
&lt;p&gt;objects receive messages. No matter how complicated the code, the receiving object ultimately handles any message in one of two ways. It either responds directly or it passes the message on to some other object for a response.
Inheritance provides a way to define two objects as having a relationship such that when the first receives a message that it does not understand, it automatically forwards, or delegates, the message to the second.&lt;/p&gt;
&lt;p&gt;Ruby has single inheritance. A superclass may have many subclasses, but each subclass is permitted only one superclass.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Every new class defined in Ruby will be automatically inherit from &lt;code&gt;Object&lt;/code&gt;, Ruby automatically forward message to subclass chain in search of a matching method implementation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;P113.&lt;/p&gt;
&lt;p&gt;subclasses are everything their superclasses are, plus more. An instance of String is a String, but it’s also an Object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;P117.&lt;/p&gt;
&lt;p&gt;Subclasses are specializations of their superclasses. For inheritance to work, two things must always be true. First, the objects that you are modeling must truly have a generalization–specialization relationship. Second, you must use the cor- rect coding techniques.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Create an abstract superclass that contains the common behavior of the subclasses, but the initialization will be from the fully featured subclasses, not the abstract superclass.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;P118.&lt;/p&gt;
&lt;p&gt;Abstract classes exist to be subclassed. This is their sole purpose. They provide a common repository for behavior that is shared across a set of subclasses—subclasses that in turn supply specializations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Extracting the common behavior to an abstract class is easier to demote the specific behavior down to subclass from an inflated class. The &amp;lsquo;push-everything-down-and-then-pull-some-things-up&amp;rsquo; strategy is an important part of extracting abstract superclass refactoring.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;P122.&lt;/p&gt;
&lt;p&gt;If you begin this refactoring with that first version of Bicycle, attempting to isolate the concrete code and push it down to RoadBike, any failure on your part will leave dangerous remnants of concreteness in the superclass. However, if you start by moving every bit of the Bicycle code to RoadBike, you can then carefully identify and promote the abstract parts without fear of leaving concrete artifacts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;template-method-pattern&#34;&gt;Template method pattern&lt;/h2&gt;
&lt;p&gt;Defining a basic structure in the superclass and sending messages to acquire subclass-specific contributions.&lt;/p&gt;
&lt;p&gt;To prevent the subclass not implementing all required template methods. Any class that uses the template method pattern must supply an implementation for every message it sends, a simple exception raise could done this job.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;P129.&lt;/p&gt;
&lt;p&gt;Creating code that fails with reasonable error messages takes minor effort in the present but provides value forever. Each error message is a small thing, but small things accumulate to produce big effects and it is this attention to detail that marks you as a serious programmer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bicycle&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:size&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:chain&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:tire_size&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{})
    @size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    @chain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:chain&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; default_chain
    @tire_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:tire_size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; default_tire_size
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;default_chain&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10-speed&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;default_tire_size&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NotImplementedError&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; cannot respond to:&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RoadBike&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bicycle&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;default_tire_size&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;23&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MountainBike&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bicycle&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;default_tire_size&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2.1&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;managing-coupling-between-superclasses-and-subclasses&#34;&gt;Managing Coupling between Superclasses and subclasses&lt;/h2&gt;
&lt;p&gt;When a subclass is implementing a method that send &lt;code&gt;super&lt;/code&gt; to its superclass, it implies that the subclass is knowing things about its superclass.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;P132.&lt;/p&gt;
&lt;p&gt;Knowing things about other classes, as always, creates dependencies and dependencies couple objects together. The dependencies in the code above are also the booby traps; both are created by the sends of super in the subclasses.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;P134.&lt;/p&gt;
&lt;p&gt;forcing a subclass to know how to interact with its abstract superclass causes many problems. When a subclass sends super it’s effectively declaring that it knows the algo- rithm; it depends on this knowledge. If the algorithm changes, then the subclasses may break even if their own specializations are not otherwise affected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;using-hook-messages-to-decoupling-subclasses&#34;&gt;Using hook messages to decoupling subclasses&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bicycle&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{})
    @size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    @chain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:chain&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; default_chain
    @tire_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:tire_size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; default_tire_size

    post_initialize(args)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;post_initialize&lt;/span&gt;(args)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RoadBike&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bicycle&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;post_initialize&lt;/span&gt;(args)
    @tape_color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:tape_color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Provide a hook method to subclass can remove the dependencies that letting subclass knowing what is implemented in superclass.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;P135.&lt;/p&gt;
&lt;p&gt;RoadBike is still responsible for what initialization it needs but is no longer responsible for when its initialization occurs. This change allows RoadBike to know less about Bicycle, reducing the coupling between them and making each more flexible in the face of an uncertain future. RoadBike doesn’t know when its post_initialize method will be called and it doesn’t care what object actually sends the message. Bicycle (or any other object) could send this message at any time, there is no requirement that it be sent during object initialization.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using the hook method on the method can looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bicycle&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spares&lt;/span&gt;
    { &lt;span style=&#34;color:#e6db74&#34;&gt;tire_size&lt;/span&gt;: tire_size,
      &lt;span style=&#34;color:#e6db74&#34;&gt;chain&lt;/span&gt;: chain }&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(local_spares)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;local_spares&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# hook for subclasses to override&lt;/span&gt;
    {}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RoadBike&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bicycle&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;local_spares&lt;/span&gt;
    { &lt;span style=&#34;color:#e6db74&#34;&gt;tape_color&lt;/span&gt;: tape_color }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;chapter-7---sharing-role-behavior-with-modules&#34;&gt;Chapter 7 - Sharing Role Behavior with Modules&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;P142.&lt;/p&gt;
&lt;p&gt;Some problems require sharing behavior among otherwise unrelated objects. This common behavior is orthogonal to class; it’s a &lt;code&gt;role&lt;/code&gt; an object plays. Many of the roles needed by an application will be obvious at design time, but it’s also common to discover unanticipated roles as you write the code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;P143.&lt;/p&gt;
&lt;p&gt;Many object-oriented languages provide a way to define a named group of methods that are independent of class and can be mixed in to any object. In Ruby, these mix-ins are called modules. Methods can be defined in a module and then the module can be added to any object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Module and Inheritance is a &lt;code&gt;behaves-like-a&lt;/code&gt; versus &lt;code&gt;is-a&lt;/code&gt; difference, each choice has distinct consequences.&lt;/p&gt;
&lt;h2 id=&#34;method-looking-up-path&#34;&gt;Method Looking Up Path&lt;/h2&gt;
&lt;p&gt;When a method is called on an object, the lookup path of that methods has principle as below, take a &lt;code&gt;mountain_bike = MountainBike.new&lt;/code&gt; instance as example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check the method defined by Singleton Class in &lt;code&gt;mountain_bike&lt;/code&gt; (Methods defined only in this &lt;code&gt;mountain_bike&lt;/code&gt; instance)&lt;/li&gt;
&lt;li&gt;Check module extended into the Singleton Class (Methods defined in modules with which this &lt;code&gt;mountain_bike&lt;/code&gt; instance has been extended)&lt;/li&gt;
&lt;li&gt;Check method defined within the object&amp;rsquo;s own class (Method defined in &lt;code&gt;MountainBike&lt;/code&gt; class)&lt;/li&gt;
&lt;li&gt;Check module included in the object&amp;rsquo;s class (Methods defined in modules included in class &lt;code&gt;MountainBike&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Check method defines within the object&amp;rsquo;s superclass (Method defined in &lt;code&gt;Bike&lt;/code&gt; class)&lt;/li&gt;
&lt;li&gt;Check module included in the object&amp;rsquo;s superclass (Methods defined in modules included in class &lt;code&gt;Bike&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;recognizing-the-antipatterns&#34;&gt;Recognizing the antipatterns&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;if an object uses a variable with a name like &lt;code&gt;type&lt;/code&gt; or &lt;code&gt;category&lt;/code&gt; to determine what message to send to self, this implies the code has to be changed whenever there&amp;rsquo;s new &lt;code&gt;type&lt;/code&gt; or &lt;code&gt;category&lt;/code&gt; being added.&lt;/li&gt;
&lt;li&gt;when a sending object checks the class of a receiving object to determine what message to send, there&amp;rsquo;s possible that we have a duck type here.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;respect-the-contract&#34;&gt;Respect the Contract&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;P.160&lt;/p&gt;
&lt;p&gt;Subclasses agree to a contract; they promise to be substitutable for their superclasses. Substitutability is possible only when objects behave as expected and subclasses are expected to conform to their superclass’s interface. They must respond to every message in that interface, taking the same kinds of inputs and returning the same kinds of outputs. They are not permitted to do anything that forces others to check their type in order to know how to treat them or what to expect of them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;liskov-substitution-principle-lsp&#34;&gt;Liskov Substitution Principle (LSP)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Let q(x) be a property provable about objects x of type T. Then q(y)
should be true for objects y of type S where S is a subtype of T.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Checkout Chinese explaination for LSP &lt;a href=&#34;http://teddy-chen-tw.blogspot.tw/2012/01/4.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;decouple-classes&#34;&gt;Decouple Classes&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;P.161&lt;/p&gt;
&lt;p&gt;Avoid writing code that requires its inheritors to send &lt;code&gt;super&lt;/code&gt;, use hook messages to allow subclasses to participate while absolving them of responsibility for knowing that abstract algorithm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;P162.&lt;/p&gt;
&lt;p&gt;Shallow, narrow hierarchies are easy to understand.
Shallow, wide hierarchies are slightly more complicated.
Deep, narrow hierarchies are a bit more challenging and unfortunately have a natural tendency to get wider, strictly as a side effect of their depth.
Deep, wide hierarchies are difficult to understand, costly to maintain, and should be avoided.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;chapter-8---combining-objects-with-composition&#34;&gt;Chapter 8 - Combining Objects with Composition&lt;/h1&gt;
&lt;p&gt;Use an association like relation to let an instance of &lt;code&gt;Users&lt;/code&gt; class act like an &lt;code&gt;array&lt;/code&gt; of &lt;code&gt;User&lt;/code&gt; instance, is like compose the &lt;code&gt;Users&lt;/code&gt; with lots of &lt;code&gt;User&lt;/code&gt; that behaves like &lt;code&gt;User&lt;/code&gt;, these &lt;code&gt;User&lt;/code&gt; does not requires to be all the same class implementation, it just needs to be able to response the message that &lt;code&gt;Users&lt;/code&gt; might want to passing to its every &lt;code&gt;user&lt;/code&gt; component.&lt;/p&gt;
&lt;p&gt;To construct a class to act like an &lt;code&gt;Array&lt;/code&gt; in Ruby, the convinient way is to include &lt;code&gt;Enumerable&lt;/code&gt; module into the Class &lt;code&gt;Users&lt;/code&gt; and define &lt;code&gt;each&lt;/code&gt; method for the &lt;code&gt;Users&lt;/code&gt; class so that other methods defined in &lt;code&gt;Enumerable&lt;/code&gt; are able to follow with.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;P.183&lt;/p&gt;
&lt;p&gt;Delegation creates dependen- cies; the receiving object must recognize the message and know where to send it. Composition often involves delegation but the term means something more. A composed object is made up of parts with which it expects to interact via well-defined interfaces. Composition describes a has-a relationship. Meals have appetizers, uni- versities have departments, bicycles have parts. Meals, universities, and bicy- cles are composed objects. Appetizers, departments, and parts are roles. The composed object depends on the interface of the role.&lt;/p&gt;
&lt;p&gt;This leaves a gap in the definition that is filled by the term aggregation. Aggregation is exactly like composition except that the contained object has an independent life. Universities have departments, which in turn have pro- fessors. If your application manages many universities and knows about thousands of professors, it’s quite reasonable to expect that although a depart- ment completely disappears when its university goes defunct, its professors continue to exist. The university–department relationship is one of composition (in its strictest sense) and the department–professor relationship is aggregation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;deciding-between-inheritance-and-composition&#34;&gt;Deciding Between Inheritance and Composition&lt;/h2&gt;
&lt;h3 id=&#34;pros-and-cons-of-inheritance&#34;&gt;Pros and Cons of Inheritance&lt;/h3&gt;
&lt;p&gt;Well organized inheritance structure is easy to extend and maintain, adding new subclass to an existing hierarchy requires no changes to existing code.&lt;/p&gt;
&lt;p&gt;The downside of the inheritance then becomes the subclass might not want all of the superclass&amp;rsquo;s attributes and behavior. And messy inheritance structure makes the code less reusable as it supposed to be.&lt;/p&gt;
&lt;h3 id=&#34;pros-and-cons-of-composition&#34;&gt;Pros and Cons of Composition&lt;/h3&gt;
&lt;p&gt;Object that participate in composition are small, structurally independent, and have well-defined interfaces. This allows their seamless transition into pluggable, interchangeable components. Well-composed objects are therefore easily usable in new and unexpected contexts.&lt;/p&gt;
&lt;p&gt;On the other hand, a composed object relies on its many parts.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;P.187&lt;/p&gt;
&lt;p&gt;The benefits of structural independence are gained at the cost of automatic mes- sage delegation. The composed object must explicitly know which messages to delegate and to whom. Identical delegation code may be needed by many different objects;
composition provides no way to share this code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Use Inheritance for is-a Relationships&lt;/li&gt;
&lt;li&gt;Use Duck Types for behaves-like-a Relationships&lt;/li&gt;
&lt;li&gt;Use Composition for has-a Relationships&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;chapter-9---designing-cost-effective-tests&#34;&gt;Chapter 9 - Designing Cost-Effective tests&lt;/h1&gt;
&lt;p&gt;The intentions of Tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finding Bugs&lt;/li&gt;
&lt;li&gt;Supplying Documentation&lt;/li&gt;
&lt;li&gt;Deferring Design Decisions&lt;/li&gt;
&lt;li&gt;Supporting Abstractions&lt;/li&gt;
&lt;li&gt;Exposing Design Flaws&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Knowing what to test: The safest way to accomplish this is to test everything just once and in the proper place.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;P.195&lt;/p&gt;
&lt;p&gt;The design principles you are enforcing in your application apply to your tests as well. Each test is merely another application object that needs to use an existing class. The more the test gets coupled to that class, the more entangled the two become and the more vulnerable the test is to unnecessarily being forced to change.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Test the response of the incoming message of the receiver object, and only test the outgoing message that has side effect is correctly triggered.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;P.197&lt;/p&gt;
&lt;p&gt;These messages are commands and it is the responsibility of the sending object to prove that they are properly sent. Proving that a message gets sent is a test of behavior, not state, and involves assertions about the number of times, and with what arguments, the message is sent.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;test-approach-bdd-versus-tdd&#34;&gt;Test Approach: BDD versus TDD&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;P.199&lt;/p&gt;
&lt;p&gt;BDD takes an outside-in approach, creating objects at the boundary of an application and working its way inward, mock- ing as necessary to supply as-yet-unwritten objects. TDD takes an inside-out ap- proach, usually starting with tests of domain objects and then reusing these newly created domain objects in the tests of adjacent layers of code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;deleting-unused-interfaces&#34;&gt;Deleting Unused Interfaces&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;P.202&lt;/p&gt;
&lt;p&gt;Do not test an incoming message that has no dependents; delete it. You application is improved by ruthlessly eliminating code that is not actively being used. Such code is negative cash flow, it adds testing and maintenance burdens but provides no value. Deleting unused code saves money right now, if you do not do so you must test it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;proving-the-public-interface&#34;&gt;Proving the Public Interface&lt;/h2&gt;
&lt;p&gt;Test on the class&amp;rsquo;s public interface, make sure the class&amp;rsquo;s interface is stable and predictable.&lt;/p&gt;
&lt;p&gt;If one class uses another object, then the test will rely on creating classes that is required to interact with the tested interface, choose the approach that requires less resources to setup those dependencies, in other word, make the test run as fast as you can so that you will be more willing to run the test as frequent as it should be.&lt;/p&gt;
&lt;h2 id=&#34;isolating-the-object-under-test&#34;&gt;Isolating the Object Under Test&lt;/h2&gt;
&lt;p&gt;Use module to extract the role that shared among classes, increase the reuse of the test configuration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; PreparerInterfaceTest
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_implements_the_preparer_interface&lt;/span&gt;
    assert_respond_to(@object, &lt;span style=&#34;color:#e6db74&#34;&gt;:prepare_trip&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MechanicTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MiniTest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TestCase&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PreparerInterfaceTest&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;
    @mechanic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Mechanic&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# other tests which rely on @mechanic&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TripCoordinatorTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MiniTest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TestCase&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PreparerInterfaceTest&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;
    @trip_coordinator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TripCoordinator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DriverTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MiniTest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TestCase&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PreparerInterfaceTest&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;
    @driver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Driver&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;P.223&lt;/p&gt;
&lt;p&gt;Defining the PreparerInterfaceTest as a module allows you to write the test once and then reuse it in every object that plays the role. The module serves as a test and as documentation. It raises the visibility of the role and makes it easy to prove that any newly created Preparer successfully fulfills its obligations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;creating-test-doubles-that-can-sense-the-reasonable-failed&#34;&gt;Creating test doubles that can sense the reasonable failed&lt;/h2&gt;
&lt;p&gt;Using mock might create a heaven like environment for each tests if all mocks are perfectly return the exact epect values that the test expect, changes on the mocked classes might not get reflected on the test results since the changes on mocked class does not impact on the mock behavior itself.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; DiameterizableInterfaceTest
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_implements_the_diameterizable_interface&lt;/span&gt;
    assert_respond_to(@object, &lt;span style=&#34;color:#e6db74&#34;&gt;:width&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DiameterDouble&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;diameter&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Prove the test double honors the interface this # test expects.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DiameterDoubleTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MiniTest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TestCase&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DiameterizableInterfaceTest&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;
    @object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DiameterDouble&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GearTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MiniTest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TestCase&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_calculates_gear_inches&lt;/span&gt;
    gear &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Gear&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(
      &lt;span style=&#34;color:#e6db74&#34;&gt;chainring&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;cog&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;wheel&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;DiameterDouble&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
    )
    assert_in_delta(&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, gear&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gear_inches, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Above &lt;code&gt;DiameterizableInterfaceTest&lt;/code&gt; ensures the double is expected to respond to &lt;code&gt;width&lt;/code&gt; message, so the unsync between &lt;code&gt;DiameterDouble&lt;/code&gt; and the &lt;code&gt;DiameterizableInterfaceTest&lt;/code&gt; can now expose the defect of current code / test.&lt;/p&gt;
&lt;p&gt;and when we fix the Double to have latest &lt;code&gt;diameter&lt;/code&gt; interface, then the &lt;code&gt;GearTest&lt;/code&gt; that using the previous &lt;code&gt;width&lt;/code&gt; interface will failed, hence expose the possible defect existed in the &lt;code&gt;Gear&lt;/code&gt; class.&lt;/p&gt;
&lt;h2 id=&#34;testing-inherited-code&#34;&gt;Testing Inherited Code&lt;/h2&gt;
&lt;h3 id=&#34;specifying-the-inherited-interface&#34;&gt;Specifying the Inherited Interface&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; BicycleInterfaceTest
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_responds_to_default_tire_size&lt;/span&gt;
    assert_respond_to(@object, &lt;span style=&#34;color:#e6db74&#34;&gt;:default_tire_size&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_responds_to_default_chain&lt;/span&gt;
    assert_respond_to(@object, &lt;span style=&#34;color:#e6db74&#34;&gt;:default_chain&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_responds_to_chain&lt;/span&gt;
    assert_respond_to(@object, &lt;span style=&#34;color:#e6db74&#34;&gt;:chain&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_responds_to_size&lt;/span&gt;
    assert_respond_to(@object, &lt;span style=&#34;color:#e6db74&#34;&gt;:size&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_responds_to_tire_size&lt;/span&gt;
    assert_respond_to(@object, &lt;span style=&#34;color:#e6db74&#34;&gt;:tire_size&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_responds_to_spares&lt;/span&gt;
    assert_respond_to(@object, &lt;span style=&#34;color:#e6db74&#34;&gt;:spares&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BicycleTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MiniTest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TestCase&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BicycleInterfaceTest&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;
    @bike &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bicycle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;tire_size&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RoadBikeTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MiniTest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TestCase&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BicycleInterfaceTest&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;
    @bike &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;RoadBike&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;specifying-subclass-responsibilities&#34;&gt;Specifying Subclass Responsibilities&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; BicycleSubclassTest
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_responds_to_post_initialize&lt;/span&gt;
    assert_respond_to(@object, &lt;span style=&#34;color:#e6db74&#34;&gt;:post_initialize&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_responds_to_local_spares&lt;/span&gt;
    assert_respond_to(@object, &lt;span style=&#34;color:#e6db74&#34;&gt;:local_spares&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_responds_to_default_tire_size&lt;/span&gt;
    assert_respond_to(@object, &lt;span style=&#34;color:#e6db74&#34;&gt;:default_tire_size&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RoadBikeTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MiniTest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TestCase&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BicycleInterfaceTest&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BicycleSubclassTest&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;
    @bike &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;RoadBike&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;confirming-superclass-enforcement&#34;&gt;Confirming Superclass Enforcement&lt;/h3&gt;
&lt;p&gt;The Bicycle class should raise an error if a subclass does not implement default_tire_size. Even though this requirement applies to subclasses, the actual enforcement behavior is in Bicycle.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BicycleTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MiniTest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TestCase&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BicycleInterfaceTest&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;
    @bike &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bicycle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;tire_size&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_forces_subclasses_to_implement_default_tire_size&lt;/span&gt;
    assert_raises(&lt;span style=&#34;color:#66d9ef&#34;&gt;NotImplementedError&lt;/span&gt;) { @bike&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;default_tire_size }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;testing-unique-behavior&#34;&gt;Testing Unique Behavior&lt;/h3&gt;
&lt;p&gt;After testing the shared interface and the configurations with modules, it&amp;rsquo;s time to test the concrete subclass behavior. The concrete behavior is therefore existed in the Concrete Subclass test.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RoadBikeTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MiniTest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TestCase&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BicycleInterfaceTest&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BicycleSubclassTest&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;
    @bike &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;RoadBike&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;tape_color&lt;/span&gt;: &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;red&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_puts_tape_color_in_local_spares&lt;/span&gt;
    assert_equal &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;, @bike&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;local_spares&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:tape_color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;testing-abstract-superclass-behavior&#34;&gt;Testing Abstract Superclass Behavior&lt;/h3&gt;
&lt;p&gt;Create a Stub itself subclass from the to-be-tested Superclass to test the Superclass Behavior could decouple especific subclass from the Superclass tests.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Make sure this StubbedBike behaves correctly the class can be checked by&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# the BicycleSubclassTest module like the DiameterizableInterfaceTest we did&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StubbedBikeTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MiniTest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TestCase&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BicycleSubclassTest&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;
    @object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;StubbedBike&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StubbedBike&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bicycle&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;default_tire_size&lt;/span&gt;
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;local_spares&lt;/span&gt;
    { &lt;span style=&#34;color:#e6db74&#34;&gt;saddle&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;painful&amp;#39;&lt;/span&gt; }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BicycleTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MiniTest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;TestCase&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BicycleInterfaceTest&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setup&lt;/span&gt;
    @bike &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; @object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bicycle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;tire_size&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    @stubbed_bike &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;StubbedBike&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_forces_subclasses_to_implement_default_tire_size&lt;/span&gt;
    assert_raises(&lt;span style=&#34;color:#66d9ef&#34;&gt;NotImplementedError&lt;/span&gt;) { @bike&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;default_tire_size }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_includes_local_spares_in_spares&lt;/span&gt;
    assert_equal @stubbed_bike&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spares, { &lt;span style=&#34;color:#e6db74&#34;&gt;tire_size&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                                         &lt;span style=&#34;color:#e6db74&#34;&gt;chain&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10-speed&amp;#39;&lt;/span&gt;,
                                         &lt;span style=&#34;color:#e6db74&#34;&gt;saddle&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;painful&amp;#39;&lt;/span&gt; }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>利用 find_in_batches 在 Rails 做跨資料庫的資料移轉操作</title>
       <link>https://raviwu.github.io/posts/use-find-in-batches-during-migration/</link>
       <pubDate>Fri, 02 Sep 2016 05:05:44 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/use-find-in-batches-during-migration/</guid>
       <description>&lt;p&gt;在處理跨資料庫搬動並且需要一筆一筆資料去做各種運算處理時，最直覺的方式，是把表格裡的所有資料通通透過 ORM 撈到 &lt;code&gt;ActiveRecord::Association&lt;/code&gt; 陣列裡，再用 &lt;code&gt;each&lt;/code&gt; 去做操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
    user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;assign@new.email&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但由於 Rails 會需要先去建立這些 objects，如果資料筆數很多的話，一次通通撈出來會佔用過多不必要的記憶體，可以使用 &lt;code&gt;find_in_batches&lt;/code&gt; 做批次處理，減少系統 RAM 的負擔。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_in_batches &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;group&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
    group&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
    user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;assign@new.email&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但如果要做跨資料庫的處理時，需要特別安插 &lt;code&gt;ActiveRecord::Base.establish_connection&lt;/code&gt; 讓 Rails 知道當前操作需要連到哪個資料庫，舉例而言，假如想把資料一批一批從 &lt;code&gt;:origin&lt;/code&gt; 調出來，然後檢查、編輯以後塞到 &lt;code&gt;:migrated&lt;/code&gt; 資料庫裡，那麼需要在 Query 前去告訴 Rails 目前要連到哪個資料去撈資料：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Tell rails to get data from :origin&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;establish_connection &lt;span style=&#34;color:#e6db74&#34;&gt;:origin&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_in_batches &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;group&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;

    group&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# user variable here are the user object that Rails queried from :origin DB and initialed&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Tell rails to switch connection to :migrated for data manipulation&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;establish_connection &lt;span style=&#34;color:#e6db74&#34;&gt;:migrated&lt;/span&gt;

    migrated_user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_by_email(user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;email) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;email&lt;/span&gt;: user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;email)
    migrated_user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assign_attributes(user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attributes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reject{ &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;key,value&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt; })
    migrated_user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save! &lt;span style=&#34;color:#75715e&#34;&gt;# This migrated_user will be saved in :migrated database&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Tell rails to switch connection to :origin to query next batch&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Base&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;establish_connection &lt;span style=&#34;color:#e6db74&#34;&gt;:origin&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# If not assigning the connection before end of the block,&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# find_in_batches will query :migrated database for the next batch with&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# SELECT `users`.* FROM `users`&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#   WHERE (`users`.`id` &amp;gt; 1000)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#   ORDER BY `users`.`id` ASC&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#   LIMIT 1000&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如此一來，能有效減少 RAM 的負擔，&lt;code&gt;find_in_batches&lt;/code&gt; 預設一次撈 1000 筆資料，也可以指定批次筆數和 query 的 ID 區間，參考文件 &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveRecord/Batches.html&#34;&gt;http://api.rubyonrails.org/classes/ActiveRecord/Batches.html&lt;/a&gt;。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>使用 Google Sheets API 拉資料到 Rails APP 裡</title>
       <link>https://raviwu.github.io/posts/pull-data-to-rails-from-google-sheet/</link>
       <pubDate>Sat, 09 Jul 2016 05:17:26 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/pull-data-to-rails-from-google-sheet/</guid>
       <description>&lt;p&gt;Google Sheets 很好用，一些程式中需要跨部門討論的字串定義，又或者是需要讓不方便存取原始碼的同事也能清楚知道原始碼裡部分設定字串的時候，通常都可以利用 Google Sheet 來做討論平台，再以 Google Sheets 上面的文件為基礎，匯入主程式中做各種處理，確保主程式的內容與 Google Sheets 上的內容同步。&lt;/p&gt;
&lt;p&gt;要匯入 Google Sheets 內容到程式裡最簡單的方式，是輸出 csv 後寫個小 script 去讀取 csv 資料，轉成 Array 後就能靈活使用。&lt;/p&gt;
&lt;p&gt;但若是開發過程當中常常要不斷更新 Google Sheets 欄位後再手動匯出 csv 跑 script 去後處理，這種半自動的方式還是令人覺得太過麻煩。可以考慮進一步用 Google Sheets API 去拉特定 Google Sheets 工作表資料，把半自動的「到瀏覽器視窗匯出 csv &amp;gt; 儲存檔案到特定資料夾 &amp;gt; 執行 script 完成匯入」簡化為「執行 script 完成匯入」。&lt;/p&gt;
&lt;p&gt;首先到 &lt;a href=&#34;https://console.developers.google.com/apis/api/sheets.googleapis.com/overview&#34;&gt;Google API Console&lt;/a&gt; 申請一個可用的 API 身份，因為這隻 API 只要存取特定 Google Sheets 的內容，與其他 Google User 沒有互動，所以選用 &lt;a href=&#34;https://support.google.com/googleapi/answer/6158849?hl=zh-Hant#serviceaccounts&#34;&gt;Service Account&lt;/a&gt; 的授權方式就可以。&lt;/p&gt;
&lt;p&gt;如果你的 Google 帳號之前沒申請過 Google API 的話，要先「建立專案」。&lt;/p&gt;
&lt;p&gt;建立好專案後，進入 Google Sheets API 的啟用首頁，網址長得像「 &lt;a href=&#34;https://console.developers.google.com/apis/api/sheets.googleapis.com/overview?project=your-project-name&#34;&gt;https://console.developers.google.com/apis/api/sheets.googleapis.com/overview?project=your-project-name&lt;/a&gt; 」，按「啟動」就可以。&lt;/p&gt;
&lt;p&gt;啟動後到「憑證」頁籤去設定到時候要使用的憑證類型，網址長得像「 &lt;a href=&#34;https://console.developers.google.com/apis/credentials/wizard?api=sheets.googleapis.com&amp;amp;project=your-project-name&#34;&gt;https://console.developers.google.com/apis/credentials/wizard?api=sheets.googleapis.com&amp;amp;project=your-project-name&lt;/a&gt; 」，直接選擇「服務帳戶」。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raviwu.github.io/images/pull-data-to-rails-from-google-sheet/step-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;進入服務帳戶的畫面後，選擇「建立服務帳戶」。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raviwu.github.io/images/pull-data-to-rails-from-google-sheet/step-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;就會跳出指定帳戶名稱的視窗，勾選提供一組新私密金鑰的選項，選用建議的 JSON 格式。注意一下「服務帳戶 ID 」長得像一個「 email account 」，把這個「 email account 」看成到時使用這張 JSON 憑證存取時所代表的身份，簡言之，要把欲分享之 Google Sheets 文件的共享權限開給這個 email 帳號，看是只要 view 還是需要開 edit 的權限，取決於使用需求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raviwu.github.io/images/pull-data-to-rails-from-google-sheet/step-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;點選建立後就會跳出引導視窗下載 JSON 檔，&lt;strong&gt;&lt;!-- raw HTML omitted --&gt;請把這份 JSON 檔設到 .gitignore 裡&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;，以免不小心公開&lt;!-- raw HTML omitted --&gt;你的秘密&lt;!-- raw HTML omitted --&gt;。接著就可以從 Google Sheets API 拿這隻 JSON 憑證去存取開給這個「 Service Account 」權限的文件了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在 Rails 裡先裝 Google 提供的 gem 後，就可以寫一隻 Class 來存取指定的 Google Sheets 工作表：&lt;/p&gt;
&lt;p&gt;寫好 GoogleSheetCrawler 這個 Class 後，就可以在 Rails 程式裡面使用，&lt;code&gt;GoogleSheetCrawler.get_sheet_array_from_google_sheet&lt;/code&gt; 會拿到 csv 結構的 Array 去做各種數值處理，我通常會放在 &lt;code&gt;app/services/google_sheet_crawler.rb&lt;/code&gt; 裡，視需求再透過 &lt;code&gt;app/jobs/update_status_code_from_google_sheets_job.rb&lt;/code&gt; 之類的方式從 Console 手動更新或是 Cronjob 排定工作的方式去做更新。&lt;/p&gt;
&lt;p&gt;不是很難的事，但這類日常重複性操作，還是能少一個步驟是一個。（茶）&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>在 rails 上實作轉移 Parse 手機推播服務到 Amazon SNS</title>
       <link>https://raviwu.github.io/posts/migrate-push-notification-from-parse-to-aws-sns/</link>
       <pubDate>Fri, 24 Jun 2016 05:05:44 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/migrate-push-notification-from-parse-to-aws-sns/</guid>
       <description>&lt;h3 id=&#34;簡要說明&#34;&gt;簡要說明&lt;/h3&gt;
&lt;p&gt;為了避免使用者因服務轉換而被迫強制更新，移轉過程採用漸進方式。&lt;/p&gt;
&lt;p&gt;如果不需要如此痛苦的同時使用兩種服務的捧油，可以參考&lt;a href=&#34;https://mobile.awsblog.com/post/Tx3NE69QDHI7LJK/Migrating-from-Parse-Push-to-Amazon-SNS&#34;&gt;這一篇&lt;/a&gt;的實作，直接用 AWS Mobile Hub 的服務做批次資料移轉。&lt;/p&gt;
&lt;p&gt;由於在轉換期需要同時支援兩邊服務運作，又要避免使用者重複收到相同的推播，需要實作「對同一裝置擇一服務進行推播」。本篇實作的概念是，使用者只有在用新版本的 APP 登入時，伺服器才會從 APP 取得 device_token 去註冊 Amazon SNS endpoint_arn，同時刪除 Parse 服務上的使用者的所有 Installation 紀錄。&lt;/p&gt;
&lt;p&gt;Parse 跟 Amazon SNS 的 API 邏輯有些不同，主要差別在於，Parse 只需要在同一 request 裡就可以達到「推播給符合某條件的 channels 組合，並且可以指定其中的特定 users 組合」，但是 Amazon 的推播就是 topic_arn / target_arn 兩種，要收到 topic_arn 的話要先讓 endpoint_arn 訂閱特定的 topic_arn，而 target_arn 則是一個 request 只能推播給單一 target_arn (endpoint_arn)。&lt;/p&gt;
&lt;h3 id=&#34;開發步驟&#34;&gt;開發步驟&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;打包一隻 AmazonSnsWrapper 把 &lt;a href=&#34;http://docs.aws.amazon.com/sdkforruby/api/Aws/SNS.html&#34;&gt;Amazon SDK&lt;/a&gt; 提供的 method 客製成符合需求的介面，專門負責跟 Amazon server 溝通。&lt;/li&gt;
&lt;li&gt;新增 AmazonSnsInfo Model 以記錄使用者的 SNS 訂閱狀況。&lt;/li&gt;
&lt;li&gt;新增 ParseInstallationWrapper 打包 Parse RESTful API 裡的 method，查詢使用者之前透過 APP 註冊的 Installations，並且刪除已經成功轉換到 Amazon SNS 的 Installation。&lt;/li&gt;
&lt;li&gt;新增 update_push_subscription / logout API 來針對 APP 傳送的 device_token 做各種 push subscription / unsubscription 的操作。&lt;/li&gt;
&lt;li&gt;新增 PushServicesWrapper 把所有 Push 行為的邏輯打包在一起方便做服務切換。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;一-amazonsnswrapper&#34;&gt;一、 AmazonSnsWrapper&lt;/h3&gt;
&lt;p&gt;首先，我們得先建好 Amazon SNS 服務中 endpoint_arn / topic_arn / subscription_arn 新增、查詢、訂閱與刪除等機制，我習慣把第三方 API 的互動包成一個 Ruby Class 方便測試跟管理，建一個 AmazonSnsWrapper 來打包 SDK 相關的程式碼。&lt;/p&gt;
&lt;h3 id=&#34;二-amazonsnsinfo&#34;&gt;二、 AmazonSnsInfo&lt;/h3&gt;
&lt;p&gt;接著，因為管理 AWS SNS 註冊等事宜需要在資料庫裡存有相關的 platform_arn / endpoint_arn，所以新增一個 Model 叫 AmazonSnsInfo 來記錄使用者相關的 SNS 資料。&lt;/p&gt;
&lt;h3 id=&#34;三-parseinstallationwrapper&#34;&gt;三、 ParseInstallationWrapper&lt;/h3&gt;
&lt;p&gt;由於 Parse 的 Channel push 還是會把訊息推播到曾經註冊過的有效 device token 上，導致 user 可能被 channel push 轟炸，在必須同時使用兩個服務的情況下，目前我只想到可以盡可能清掉 user 註冊在 Parse 相關的 Installation。&lt;/p&gt;
&lt;h3 id=&#34;四-update_push_subscription--logout-api&#34;&gt;四、 update_push_subscription / logout API&lt;/h3&gt;
&lt;p&gt;透過 APP 的操作，可以確定使用者的使用狀態，在 APP launch 後提供最新的 device_token 到 update_push_subscription 去更新 endpoint_arn 與訂閱狀況，並且去 Parse 資料庫中撈。有時候同一裝置不一定會上回傳送一樣的 device_token，有時可能是因為使用者刪除 APP 又重裝之類的原因，如果導致 device_token 失效的話，在 Amazon SNS Console 裡這筆 endpoint 會被標註 &lt;code&gt;enabled == false&lt;/code&gt; ，所以即使不在 Amazon SNS 系統上面刪除註冊，裝置也不會收到通知。&lt;/p&gt;
&lt;p&gt;另外也有可能同一裝置、同一 device_token 但是不同的使用者登入，在測試跟評估後，採取直接刪除與 device_token 相關連的所有紀錄，刪除 AmazonSnsInfo 紀錄前因為有個 &lt;code&gt;before_destroy&lt;/code&gt; 的 callback 去反訂閱 topic 並刪除 endpoint_arn 等相關 Amazon SNS Console 紀錄，確保推播不會送錯使用者。但剛剛討論到的那些 device_token 孤兒們基本上就是會晾在 Amazon SNS Console 裡了，有想到其他清 Amazon SNS Console 無用資料方式的捧油，小的在此跪求與我聯絡，感謝感謝。&lt;/p&gt;
&lt;p&gt;規格要求還是要可以針對個別 device 的 target_arn 做推播，所以在 logout 的時候只替 endpoint 取消 topic 的訂閱。&lt;/p&gt;
&lt;h3 id=&#34;五-pushserviceswrapper&#34;&gt;五、 PushServicesWrapper&lt;/h3&gt;
&lt;p&gt;實作擇一推播相同 message 到 Parse / Amazon SNS 的機制。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Rails grape API 上實作 JWT 多重登入</title>
       <link>https://raviwu.github.io/posts/implement-jwt-in-grape-api/</link>
       <pubDate>Fri, 10 Jun 2016 05:05:44 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/implement-jwt-in-grape-api/</guid>
       <description>&lt;p&gt;多重登入的需求，在服務本身允許「跨裝置體驗」或者是「接受不同 request agent (APP request / mobile browser)」的時候顯得重要。&lt;/p&gt;
&lt;p&gt;理想情況下，可以讓使用者在介面上面清楚知道目前帳號的登入狀態，並在登入數超過服務上限的時候，讓使用者自己選擇要移除登入授權的裝置，使用者流程大概會像（&lt;a href=&#34;https://www.authy.com/blog/multi-multi-factor-authentication&#34;&gt;這篇文&lt;/a&gt;）那樣，要做到類似參考連結這樣的管理介面，需要&lt;!-- raw HTML omitted --&gt;我目前還不會的&lt;!-- raw HTML omitted --&gt;前端的配合建置與基本的 session 管理 API。本篇只先建置允許使用多重登入的資料結構與登入驗證 API。&lt;/p&gt;
&lt;p&gt;選擇用 &lt;a href=&#34;https://jwt.io/&#34;&gt;JWT (Jason Web Token)&lt;/a&gt; 作為主要的憑證溝通，優點有一些：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;透過加密 payload 來比對資料庫內容的方式，可以不用在資料表中「直接存入」與憑證相關的訊息，加密跟解密只要透過協定就能進行調整。&lt;/li&gt;
&lt;li&gt;payload 裡面塞入的訊息可以自訂，在各服務跟裝置之間交換加密過後的使用者資料。&lt;/li&gt;
&lt;li&gt;signing key / protocol 可以在有資安疑慮時更換。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 Devise 的 Rails 捧油也可參考 &lt;a href=&#34;https://github.com/lynndylanhurley/devise_token_auth&#34;&gt;devise_token_auth&lt;/a&gt; 這個 gem，整合效果在文件上面看起來很完善，但因為目前我手邊的系統絕大多數的 request 都來自 grape API endpoint ，比較過後，跟搞懂並駕馭 devise 設定比起來，我還是選擇自刻 JWT 較節省開發時間。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在 Rails grape API 上實作 JWT 多重登入，分 4 個階段。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立 user_sessions 資料表跟 UserSession Model Setup，目前找得到的 &lt;a href=&#34;https://www.sitepoint.com/introduction-to-using-jwt-in-rails/&#34;&gt;Rails JWT 整合教學&lt;/a&gt;大多是用在 Controller / Rails View 上，為了之後如果要導入前端管理裝置時可以很方便地去刪除跟紀錄不要的 Session，我選擇了透過 UserSession 這個 model 來做媒介，之後要新增 API 的時候直接去對這個 table 做 query 跟各種欄位處理，盡量把 Session 管理跟目前龐大的 users table 切乾淨。&lt;/li&gt;
&lt;li&gt;寫一隻自己的 JasonWebToken Service 把 jwt 的 code 包裝得更適合自己的系統使用：雖然 jwt 這隻 gem 的語法已經寫得很美，但還想更方便地只要把 headers 塞進去這個 wrapper 就可以得到 user object 回傳或者是指定的錯誤訊息。&lt;/li&gt;
&lt;li&gt;做好資料結構跟 JasonWebToken Service 後，就可以開始使用準備好的工具來更換 Grape API 的登入跟檢查憑證機制，首先要在登入的 API output 提供 jwt 字串。&lt;/li&gt;
&lt;li&gt;最後，在檢查憑證機制的 helper 裡使用 JasonWebToken class 去 decode request 裡面的 jwt。&lt;/li&gt;
&lt;/ol&gt;
</description>
     </item>
   
     <item>
       <title>Rails 中使用 Paperclip 存 URI 附件</title>
       <link>https://raviwu.github.io/posts/use-paperclip-to-store-uri-in-rails/</link>
       <pubDate>Thu, 12 May 2016 04:38:49 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/use-paperclip-to-store-uri-in-rails/</guid>
       <description>&lt;p&gt;使用 Rails APP + Paperclip Gem 做附件存取系統，靜態檔案的資料夾格式預設是跟著 id 跑（ /000/000/000/ 九碼化的 ID 切成 3 階資料夾），最近因為要做資料庫合併，大批的資料會被賦予新的 ID，原先放在 AWS S3 上面的靜態資料夾結構就會 mapping 錯誤，必須要依照新的 ID 去存放相對應的資料夾結構。&lt;/p&gt;
&lt;p&gt;由於部分圖片附件在存取時還會同步進行縮圖，如果要用 &lt;a href=&#34;http://s3tools.org/s3cmd-howto&#34;&gt;s3-cmd&lt;/a&gt; 這類的外部工具直接搬資料，得連各種不同 model 的縮圖定義一起處理，痛苦指數不低。&lt;/p&gt;
&lt;p&gt;原先預計要從 HTTP GET request 的 response body 裡直接塞 tempfile ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://s3.amazonaws.com&amp;#39;&lt;/span&gt;
path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/BUCKET-NAME/MODEL/ATTACHMENT/000/016/222/original/FILE.jpg&amp;#39;&lt;/span&gt;
conn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Faraday&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;:url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; url) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;faraday&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
  faraday&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request  &lt;span style=&#34;color:#e6db74&#34;&gt;:url_encoded&lt;/span&gt;
  faraday&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response &lt;span style=&#34;color:#e6db74&#34;&gt;:logger&lt;/span&gt;
  faraday&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;adapter  &lt;span style=&#34;color:#66d9ef&#34;&gt;Faraday&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;default_adapter
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get path
model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attachment &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;body
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一直噴出各式各樣無法存入或者檔案格式錯誤的錯誤訊息。&lt;/p&gt;
&lt;p&gt;試過自行重組檔案的檔頭 ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;attachment_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#e6db74&#34;&gt;:filename&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/^.*\/(.*\..*)$/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;match(uri)&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first,
  &lt;span style=&#34;color:#e6db74&#34;&gt;:type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;:headers&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers,
  &lt;span style=&#34;color:#e6db74&#34;&gt;:tempfile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;body
}

model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attachment &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; attachment_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一樣過不了 Paperclip 的檔案驗證機制。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;File.new(response.body)&lt;/code&gt; 或 &lt;code&gt;File.new(attachment_file)&lt;/code&gt; 或 &lt;code&gt;ActionDispatch::Http::UploadedFile.new(attachment_file)&lt;/code&gt; 都解析不了檔案。&lt;/p&gt;
&lt;p&gt;撞了好一會牆後，發現 Paperclip 吃 URI object。一切的撞牆只要簡單的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://s3.amazonaws.com&amp;#39;&lt;/span&gt;
path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/BUCKET-NAME/MODEL/ATTACHMENT/000/016/222/original/FILE.jpg&amp;#39;&lt;/span&gt;

model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attachment &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;URI&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;url&lt;span style=&#34;color:#e6db74&#34;&gt;}#{&lt;/span&gt;path&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;獻給其他可能要做這類奇異操作的破頭工程師們。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>程設風格 | 早期終止執行</title>
       <link>https://raviwu.github.io/posts/early-termination/</link>
       <pubDate>Fri, 15 Apr 2016 04:22:50 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/early-termination/</guid>
       <description>&lt;p&gt;剛開始寫程式的時候，以為所謂邏輯判斷就是很多個若 A 則 B 包起來的複雜地圖。這樣的程式碼，很容易因為邏輯判斷太過複雜，很難一眼就看到到底目前程式會跑到哪一個 if 分支裡面執行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;taget = Dog.new

if target.is_a?(Animal)
  if target.has_four_legs?
    if target.is_a?(Dog)
      puts &amp;quot;wolf!&amp;quot;
    else
      puts &amp;quot;four leg animal can say yeah&amp;quot;
    end
  else
    puts &amp;quot;don&#39;t know what that is&amp;quot;
  end
else
  puts &amp;quot;don&#39;t know what that is&amp;quot;
end

=&amp;gt; &amp;quot;wolf!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果透過層層過濾只是要剔除一些情況讓程式不處理，例如有很多個分支其實是「不處理」或是「同樣的簡單處理」，例如上面的 &lt;code&gt;puts &amp;quot;don&#39;t know what that is&amp;quot;&lt;/code&gt; ，可以改用「早期終止」的模式來改寫。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def what_it_says(target)
  # 如果不符合條件的參數就會在此提早回傳值
  return &amp;quot;don&#39;t know what that is&amp;quot; unless target.is_a?(Animal) &amp;amp;&amp;amp; target.has_four_legs?

  # 符合資格的參數才會進入真正的必要判斷
  if target.is_a?(Dog)
    &amp;quot;wolf!&amp;quot;
  else
    &amp;quot;four leg animal can say yeah&amp;quot;
  end
end

taget = Dog.new
puts what_it_says(taget)

=&amp;gt; &amp;quot;wolf!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這個模式可以有效減少邏輯套邏輯的複雜架構，程式碼比較好看出來究竟是要執行什麼事情，也比較好 debug 。&lt;/p&gt;
&lt;p&gt;如果要用譬喻法形容，其實就跟人生一樣，別花太多力氣在不重要的事情上面，及早說不。&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>終端機工具</title>
       <link>https://raviwu.github.io/posts/command-line-tools-notes/</link>
       <pubDate>Sun, 27 Mar 2016 04:07:31 +0800</pubDate>
       
       <guid>https://raviwu.github.io/posts/command-line-tools-notes/</guid>
       <description>&lt;p&gt;轉型後端工程師的路上，看了很多教學，裝了很多套件，用過很多軟體。目前用得還算不手殘的工具只有終端機（terminal）跟文本編輯器（text editor）。&lt;/p&gt;
&lt;p&gt;因為要經常性切換不同的 Git Branch，MacOX 本來附掛的 terminal 顯得有點陽春，需要極大注意力才能清楚知道自己究竟目前身在何處又在哪支 branch 裡。&lt;/p&gt;
&lt;p&gt;先烈做了很多很棒的工具改善工作體驗與視覺效果，iTerm 2 很是不錯，搭配上一些快捷熱鍵可以有效增加效率。&lt;/p&gt;
&lt;h2 id=&#34;shortcut-of-iterms2&#34;&gt;Shortcut of iTerms2&lt;/h2&gt;
&lt;h3 id=&#34;windows-and-tabs&#34;&gt;windows and tabs&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;command + T&lt;/code&gt; to open new tab&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shift + command + [ / ]&lt;/code&gt; to switch between tabs&lt;/p&gt;
&lt;p&gt;&lt;code&gt;command + W&lt;/code&gt; to close the tab&lt;/p&gt;
&lt;p&gt;&lt;code&gt;command + D&lt;/code&gt; to have vertical divided windows&lt;/p&gt;
&lt;p&gt;&lt;code&gt;command + [ / ]&lt;/code&gt; to switch between windows&lt;/p&gt;
&lt;h3 id=&#34;cursor&#34;&gt;cursor&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ctrl + a&lt;/code&gt; to go to the beginning of line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + e&lt;/code&gt; to go to the end of line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + f/b&lt;/code&gt; to move the cursor&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + p&lt;/code&gt; to get last command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + r&lt;/code&gt; to search history&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + d&lt;/code&gt; to delete the current character&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + h&lt;/code&gt; to delete previous characters from current cursor&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + w&lt;/code&gt; to delete previous word from current cursor&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + k&lt;/code&gt; to delete following charaters from current cursor&lt;/p&gt;
&lt;p&gt;&lt;code&gt;command + /&lt;/code&gt; to locate cursor position&lt;/p&gt;
&lt;h3 id=&#34;font-size&#34;&gt;font size&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;command + -/+&lt;/code&gt; to decrease or increase the font size&lt;/p&gt;
&lt;h2 id=&#34;shell&#34;&gt;Shell&lt;/h2&gt;
&lt;p&gt;除此之外，還從預設的 &lt;a href=&#34;http://icarus4.logdown.com/posts/177661-from-bash-to-zsh-setup-tips&#34;&gt;bash shell（bash）轉成 z shell（zsh&lt;/a&gt;，搭配華麗的 &lt;a href=&#34;http://ohmyz.sh/&#34;&gt;oh-my-zsh&lt;/a&gt; 主題 &lt;a href=&#34;https://gist.github.com/3712874&#34;&gt;agnoster&lt;/a&gt;，記得補安裝 &lt;a href=&#34;https://github.com/powerline/fonts&#34;&gt;PowerLine Font&lt;/a&gt; 以免亂碼，讓後端工作也可以帶點美感，使用 Homebrew 安裝很是方便。&lt;/p&gt;
&lt;p&gt;工具貴在熟練不在多，閒暇之餘，從 &lt;a href=&#34;https://www.learnenough.com/command-line-tutorial&#34;&gt;Learn Enough Command Line to be Dangerous&lt;/a&gt; 開始訓練肌肉記憶，專精之路尚遠矣。&lt;/p&gt;
&lt;h3 id=&#34;see-usage-of-specific-command-man&#34;&gt;See Usage of specific command: &lt;code&gt;man&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;man command&lt;/code&gt; checks out the manual for the command, for instance use &lt;code&gt;man echo&lt;/code&gt; to see the description of the &lt;code&gt;echo&lt;/code&gt; command.&lt;/p&gt;
&lt;h3 id=&#34;common-quit-from-mass-or-manufal-windows&#34;&gt;Common quit from mass or manufal windows&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;q&lt;/code&gt; to quit the manual mode, normally &lt;code&gt;q&lt;/code&gt; works for the similar mode entered by other command like &lt;code&gt;ri Array&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;ctrl + C&lt;/code&gt; to kill current exucution of code, break the unfinit loop, etc.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;echo &amp;quot;some string&amp;quot; &amp;gt; file.txt&lt;/code&gt; to through &lt;code&gt;&amp;quot;some string&amp;quot;&lt;/code&gt; to &lt;code&gt;&amp;quot;file.txt&amp;quot;&lt;/code&gt;. use &lt;code&gt;echo &amp;quot;another thing&amp;quot; &amp;gt;&amp;gt; file.txt&lt;/code&gt; to &lt;em&gt;concat&lt;/em&gt; the &lt;code&gt;&amp;quot;another string&amp;quot;&lt;/code&gt; into the &lt;code&gt;&amp;quot;file.txt&amp;quot;&lt;/code&gt;. By default &lt;code&gt;echo&lt;/code&gt; appends &lt;code&gt;\n&lt;/code&gt; to the end of the string.&lt;/p&gt;
&lt;h3 id=&#34;simple-output-of-a-file-cat&#34;&gt;Simple output of a file: &lt;code&gt;cat&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Output the file content on the command line use &lt;code&gt;cat&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat file_1.txt file_2.txt &amp;gt; combined_file.txt&lt;/code&gt; can pass the &lt;code&gt;file_1.txt&lt;/code&gt; and &lt;code&gt;file_2.txt&lt;/code&gt; content to the &lt;code&gt;combined_file.txt&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;inspecting-a-file&#34;&gt;Inspecting a file&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;head file_name.txt&lt;/code&gt; list the first 10 lines of a file&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tail file_name.txt&lt;/code&gt; list the last 10 lines of a file&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wc file_name.txt&lt;/code&gt; list the &amp;ldquo;line counts&amp;rdquo;, &amp;ldquo;word counts&amp;rdquo;, and &amp;ldquo;bytes&amp;rdquo; of the file&lt;/p&gt;
&lt;p&gt;&lt;code&gt;less file_name.txt&lt;/code&gt; has &lt;code&gt;/search_word&lt;/code&gt; function to inspect the file &lt;a href=&#34;https://en.wikipedia.org/wiki/Less_(Unix)&#34;&gt;less wiki page&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;view-the-files-within-directory-ls&#34;&gt;View the files within directory: &lt;code&gt;ls&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ls -l&lt;/code&gt; list out files in long format&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ls -la&lt;/code&gt; list out all files in long format, including the hidden files&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ls -rtl&lt;/code&gt; list out files in long format, with reversed order by recent modify time.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ls -lh&lt;/code&gt; list out files in long format, with human readable file size count (K instead of bytes).&lt;/p&gt;
&lt;h3 id=&#34;file-manipulation-mv-rm-cp-diff&#34;&gt;File manipulation: &lt;code&gt;mv&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt;, &lt;code&gt;cp&lt;/code&gt;, &lt;code&gt;diff&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;mv file_a.txt file_b.txt&lt;/code&gt; rename &lt;code&gt;file_a.txt&lt;/code&gt; to &lt;code&gt;file_b.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rm file_a.txt&lt;/code&gt; remove &lt;code&gt;file_a.txt&lt;/code&gt; &lt;code&gt;rm -rf file_a.txt&lt;/code&gt; force remove &lt;code&gt;file_a.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cp file_a.txt file_b.txt&lt;/code&gt; copy &lt;code&gt;file_a.txt&lt;/code&gt; to &lt;code&gt;file_b.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;diff file_a.txt file_b.txt&lt;/code&gt; to show the difference between two file. There won&amp;rsquo;t be output if the two files has no difference.&lt;/p&gt;
&lt;h3 id=&#34;check-if-programme-installed-which&#34;&gt;Check if programme installed: &lt;code&gt;which&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;which ruby&lt;/code&gt; checks whether ruby is installed in the computer&lt;/p&gt;
&lt;h3 id=&#34;user-grep-to-catch-the-specified-string-in-file&#34;&gt;user &lt;code&gt;grep&lt;/code&gt; to catch the specified string in file&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;grep -i string file.txt&lt;/code&gt; means catch all case insensitive &amp;ldquo;string&amp;rdquo; in &amp;ldquo;file.txt&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grep string file.txt | wc&lt;/code&gt; pipes the result of &lt;code&gt;grep&lt;/code&gt; and pass it to wordcount programme&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grep -ri string directory&lt;/code&gt; can find string from the very deep level, starts from the directory, case insentitive&lt;/p&gt;
&lt;h3 id=&#34;managing-process-status-with-ps&#34;&gt;managing process status with &lt;code&gt;ps&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ps aux | grep string&lt;/code&gt; in processes status shows in aux options and pipe result to grep then grep the &amp;ldquo;string&amp;rdquo; form ps aux result&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kill -15 &amp;lt;pid&amp;gt;&lt;/code&gt; to kill the individual process with process id&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pkill -15 -f spring&lt;/code&gt; can kill all process contains string spring&lt;/p&gt;
&lt;h3 id=&#34;directories&#34;&gt;directories&lt;/h3&gt;
&lt;p&gt;home directory is normally &lt;code&gt;/Users/username/&lt;/code&gt; alias &lt;code&gt;~/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;use &lt;code&gt;sudo command&lt;/code&gt; to get root permission for operation&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mkdir&lt;/code&gt; to make new directory&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt; to print current working directory&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find . -name &#39;*.txt&#39;&lt;/code&gt; to find files whose names match the pattern &lt;code&gt;*.txt&lt;/code&gt;, starting in the current directory . and then in its subdirectories&lt;/p&gt;
&lt;p&gt;&lt;code&gt;open file.ext&lt;/code&gt; will open the file.ext with default programe to the .ext files&lt;/p&gt;
&lt;p&gt;&lt;code&gt;open .&lt;/code&gt; will then execute finder and open current directory&lt;/p&gt;
&lt;h3 id=&#34;combining-commands-in-single-line&#34;&gt;combining commands in single line&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;command line1 ; command line2 ; command line 3&lt;/code&gt; use &lt;code&gt;;&lt;/code&gt; to combine three commands in single line, and execute the three commands one after another&lt;/p&gt;
&lt;p&gt;&lt;code&gt;command line1 &amp;amp;&amp;amp; command line2 &amp;amp;&amp;amp; command line3&lt;/code&gt; works similar as &lt;code&gt;;&lt;/code&gt; seperator, using &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; can make the following command execute only if previous command successfully executed.&lt;/p&gt;
&lt;h3 id=&#34;configure-the-shell&#34;&gt;Configure the shell&lt;/h3&gt;
&lt;p&gt;edit &lt;code&gt;~/.zshrc&lt;/code&gt; file with the resired configs and save it&lt;/p&gt;
&lt;p&gt;&lt;code&gt;source .zshrc&lt;/code&gt; to reload the config&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.bashrc&lt;/code&gt; is the config file for bash shell&lt;/p&gt;
</description>
     </item>
   
 </channel>
</rss>
