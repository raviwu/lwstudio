<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rails on Ravi Wu</title>
    <link>https://raviwu.github.io/tags/rails/</link>
    <description>Recent content in rails on Ravi Wu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <copyright>Copyright © 2020 | Ravi Wu</copyright>
    <lastBuildDate>Sat, 14 Jan 2017 13:25:31 +0800</lastBuildDate><atom:link href="https://raviwu.github.io/tags/rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在 Trailblazer 的 Policy 中透過客制 Exception 來處理複雜的「錯誤回應」</title>
      <link>https://raviwu.github.io/posts/customize-error-handlement-in-trailblazer-policy/</link>
      <pubDate>Sat, 14 Jan 2017 13:25:31 +0800</pubDate>
      
      <guid>https://raviwu.github.io/posts/customize-error-handlement-in-trailblazer-policy/</guid>
      <description>為了盡量貼近 Trailblazer 的設計概念，許多原先會透過 Controller before_action 去處理的權限管控，盡量都搬進 Trailblazer 的 Policy 裡。
Policy 採用類似 Pundit 的語法，典型的 Policy 如下：
class Thing::Policy def initialize(user, thing) @user, @thing = user, thing end def create?</description>
    </item>
    
    <item>
      <title>初探 Trailblazer 框架</title>
      <link>https://raviwu.github.io/posts/elementary-trailblazer/</link>
      <pubDate>Sat, 07 Jan 2017 13:23:29 +0800</pubDate>
      
      <guid>https://raviwu.github.io/posts/elementary-trailblazer/</guid>
      <description>最近公司的 Rails 專案試用了 Trailblazer 這套整理 Rails 程式碼的框架。（目前使用的是 1.1 版）
Trailblazer 是擺在 Rails 上的一套工具，雖然有本專書可以翻找，但實際上就是個自成一格的整理程式碼套路，除了要學新的 DSL 外，在 API 文件沒有寫得非常詳細，加上使用者也沒多到可以 stackoverflow 的情況下，假如開發需求和設計者 Nick Sutterer 設想的情況不一樣時，小小撞牆是難免的。</description>
    </item>
    
    <item>
      <title>利用 find_in_batches 在 Rails 做跨資料庫的資料移轉操作</title>
      <link>https://raviwu.github.io/posts/use-find-in-batches-during-migration/</link>
      <pubDate>Fri, 02 Sep 2016 05:05:44 +0800</pubDate>
      
      <guid>https://raviwu.github.io/posts/use-find-in-batches-during-migration/</guid>
      <description>在處理跨資料庫搬動並且需要一筆一筆資料去做各種運算處理時，最直覺的方式，是把表格裡的所有資料通通透過 ORM 撈到 ActiveRecord::Association 陣列裡，再用 each 去做操作：
User.all.each do |user| user.email = &amp;#34;assign@new.email&amp;#34; ... end 但由於 Rails 會需要先去建立這些 objects，如果資料筆數很多的話，一次通通撈出來會佔用過多不必要的記憶體，可以使用 find_in_batches 做批次處理，減少系統 RAM 的負擔。</description>
    </item>
    
    <item>
      <title>使用 Google Sheets API 拉資料到 Rails APP 裡</title>
      <link>https://raviwu.github.io/posts/pull-data-to-rails-from-google-sheet/</link>
      <pubDate>Sat, 09 Jul 2016 05:17:26 +0800</pubDate>
      
      <guid>https://raviwu.github.io/posts/pull-data-to-rails-from-google-sheet/</guid>
      <description>Google Sheets 很好用，一些程式中需要跨部門討論的字串定義，又或者是需要讓不方便存取原始碼的同事也能清楚知道原始碼裡部分設定字串的時候，通常都可以利用 Google Sheet 來做討論平台，再以 Google Sheets 上面的文件為基礎，匯入主程式中做各種處理，確保主程式的內容與 Google Sheets 上的內容同步。
要匯入 Google Sheets 內容到程式裡最簡單的方式，是輸出 csv 後寫個小 script 去讀取 csv 資料，轉成 Array 後就能靈活使用。</description>
    </item>
    
    <item>
      <title>在 rails 上實作轉移 Parse 手機推播服務到 Amazon SNS</title>
      <link>https://raviwu.github.io/posts/migrate-push-notification-from-parse-to-aws-sns/</link>
      <pubDate>Fri, 24 Jun 2016 05:05:44 +0800</pubDate>
      
      <guid>https://raviwu.github.io/posts/migrate-push-notification-from-parse-to-aws-sns/</guid>
      <description>簡要說明 為了避免使用者因服務轉換而被迫強制更新，移轉過程採用漸進方式。
如果不需要如此痛苦的同時使用兩種服務的捧油，可以參考這一篇的實作，直接用 AWS Mobile Hub 的服務做批次資料移轉。
由於在轉換期需要同時支援兩邊服務運作，又要避免使用者重複收到相同的推播，需要實作「對同一裝置擇一服務進行推播」。本篇實作的概念是，使用者只有在用新版本的 APP 登入時，伺服器才會從 APP 取得 device_token 去註冊 Amazon SNS endpoint_arn，同時刪除 Parse 服務上的使用者的所有 Installation 紀錄。</description>
    </item>
    
    <item>
      <title>Rails grape API 上實作 JWT 多重登入</title>
      <link>https://raviwu.github.io/posts/implement-jwt-in-grape-api/</link>
      <pubDate>Fri, 10 Jun 2016 05:05:44 +0800</pubDate>
      
      <guid>https://raviwu.github.io/posts/implement-jwt-in-grape-api/</guid>
      <description>多重登入的需求，在服務本身允許「跨裝置體驗」或者是「接受不同 request agent (APP request / mobile browser)」的時候顯得重要。
理想情況下，可以讓使用者在介面上面清楚知道目前帳號的登入狀態，並在登入數超過服務上限的時候，讓使用者自己選擇要移除登入授權的裝置，使用者流程大概會像（這篇文）那樣，要做到類似參考連結這樣的管理介面，需要我目前還不會的前端的配合建置與基本的 session 管理 API。本篇只先建置允許使用多重登入的資料結構與登入驗證 API。
選擇用 JWT (Jason Web Token) 作為主要的憑證溝通，優點有一些：
 透過加密 payload 來比對資料庫內容的方式，可以不用在資料表中「直接存入」與憑證相關的訊息，加密跟解密只要透過協定就能進行調整。 payload 裡面塞入的訊息可以自訂，在各服務跟裝置之間交換加密過後的使用者資料。 signing key / protocol 可以在有資安疑慮時更換。  使用 Devise 的 Rails 捧油也可參考 devise_token_auth 這個 gem，整合效果在文件上面看起來很完善，但因為目前我手邊的系統絕大多數的 request 都來自 grape API endpoint ，比較過後，跟搞懂並駕馭 devise 設定比起來，我還是選擇自刻 JWT 較節省開發時間。</description>
    </item>
    
    <item>
      <title>Rails 中使用 Paperclip 存 URI 附件</title>
      <link>https://raviwu.github.io/posts/use-paperclip-to-store-uri-in-rails/</link>
      <pubDate>Thu, 12 May 2016 04:38:49 +0800</pubDate>
      
      <guid>https://raviwu.github.io/posts/use-paperclip-to-store-uri-in-rails/</guid>
      <description>使用 Rails APP + Paperclip Gem 做附件存取系統，靜態檔案的資料夾格式預設是跟著 id 跑（ /000/000/000/ 九碼化的 ID 切成 3 階資料夾），最近因為要做資料庫合併，大批的資料會被賦予新的 ID，原先放在 AWS S3 上面的靜態資料夾結構就會 mapping 錯誤，必須要依照新的 ID 去存放相對應的資料夾結構。</description>
    </item>
    
  </channel>
</rss>
