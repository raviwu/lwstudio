<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>trailblazer on Ravi Wu</title>
    <link>https://raviwu.github.io/tags/trailblazer/</link>
    <description>Recent content in trailblazer on Ravi Wu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>Copyright © 2020, Ravi Wu.</copyright>
    <lastBuildDate>Sat, 14 Jan 2017 13:25:31 +0800</lastBuildDate><atom:link href="https://raviwu.github.io/tags/trailblazer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在 Trailblazer 的 Policy 中透過客制 Exception 來處理複雜的「錯誤回應」</title>
      <link>https://raviwu.github.io/posts/customize-error-handlement-in-trailblazer-policy/</link>
      <pubDate>Sat, 14 Jan 2017 13:25:31 +0800</pubDate>
      
      <guid>https://raviwu.github.io/posts/customize-error-handlement-in-trailblazer-policy/</guid>
      <description>為了盡量貼近 Trailblazer 的設計概念，許多原先會透過 Controller before_action 去處理的權限管控，盡量都搬進 Trailblazer 的 Policy 裡。
Policy 採用類似 Pundit 的語法，典型的 Policy 如下：
class Thing::Policy def initialize(user, thing) @user, @thing = user, thing end def create? (admin? || approved?) &amp;amp;&amp;amp; @thing.persisted? end private def admin? @user.admin == true end def approved? @user.is_approved end end 在 Operation 中若要調用這隻 Policy 的話要宣告：
class Thing::Create &amp;lt; Trailblazer::Operation builds -&amp;gt; (params) { dispatched_class_accroding_to(params) } def self.dispatched_class_accroding_to(params) Thing::Create end include Trailblazer::Operation::Policy policy Thing::Policy, :create?</description>
    </item>
    
    <item>
      <title>初探 Trailblazer 框架</title>
      <link>https://raviwu.github.io/posts/elementary-trailblazer/</link>
      <pubDate>Sat, 07 Jan 2017 13:23:29 +0800</pubDate>
      
      <guid>https://raviwu.github.io/posts/elementary-trailblazer/</guid>
      <description>最近公司的 Rails 專案試用了 Trailblazer 這套整理 Rails 程式碼的框架。（目前使用的是 1.1 版）
Trailblazer 是擺在 Rails 上的一套工具，雖然有本專書可以翻找，但實際上就是個自成一格的整理程式碼套路，除了要學新的 DSL 外，在 API 文件沒有寫得非常詳細，加上使用者也沒多到可以 stackoverflow 的情況下，假如開發需求和設計者 Nick Sutterer 設想的情況不一樣時，小小撞牆是難免的。
Trailblazer 是模組化設計，所以並非所有模組需要安裝才能開始享受 Trailblazer 帶來的方便感，除了主要的 Operation / Policy / Contract / Cell 等稍微有摸過外，其他的眉眉角角尚待開發。稍微整理一下截至目前為止使用這套框架的個人認知，這套 Trailblazer 的目的是將原先 Rails 單純 MVC 架構下可能會散亂在 Controller / Model 層的商業邏輯，集中起來包在 Operation 的概念裡，（在理想狀況下）分別簡化日益肥大的 Controller / Model / View 邏輯：
 Controller  讓 controller 單純負責傳送 current_user / resource 到正確的 operation 並視操作結果導向相對應的路由 權限控管交給 Policy 處理，用 controller 塞給 operation 的 current_user 配合 operation 的 model!</description>
    </item>
    
  </channel>
</rss>
